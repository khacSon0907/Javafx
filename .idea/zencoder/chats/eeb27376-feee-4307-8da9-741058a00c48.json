{
    "checksum": "6d2498930c18d8bcc0ebbd881afae12604d8d5f0a74db420c1e8362ae9d7c591",
    "data": {
    "id": "eeb27376-feee-4307-8da9-741058a00c48",
    "createdAt": 1752084138331,
    "updatedAt": 1752086057681,
    "title": "Java Method Resolution Issues",
    "messages": [
        {
            "id": "bedf9583-9059-4bc2-b888-de6f26d90ab8",
            "role": "user",
            "content": [
                {
                    "type": "command",
                    "commandName": "explain"
                },
                {
                    "type": "codeSnippet",
                    "text": "productDAO.getProductById(detail.getProductId())",
                    "language": "java"
                },
                {
                    "type": "text",
                    "text": "Cannot resolve method 'getProductById' in 'ProductDAO'"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                    "fsPath": "D:/STUDY-HUFLIT/CoffeeShop/coffeeShop/src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                    "content": "package com.coffeeshop.coffeeshop.controller;\n\nimport com.coffeeshop.coffeeshop.dao.OrderDao;\nimport com.coffeeshop.coffeeshop.dao.ProductDAO;\nimport com.coffeeshop.coffeeshop.model.Order;\nimport com.coffeeshop.coffeeshop.model.OrderDetail;\nimport com.coffeeshop.coffeeshop.model.Product;\nimport com.coffeeshop.coffeeshop.util.DBConnection;\nimport javafx.beans.property.SimpleDoubleProperty;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\nimport javafx.util.Callback;\n\nimport java.sql.Connection;\nimport java.text.DecimalFormat;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class OrderUpdateController {\n\n    @FXML private TextField searchField;\n    @FXML private ComboBox<String> filterStatusComboBox;\n    @FXML private TableView<Order> ordersTable;\n    @FXML private TableColumn<Order, Integer> orderIdColumn;\n    @FXML private TableColumn<Order, Integer> staffIdColumn;\n    @FXML private TableColumn<Order, String> orderDateColumn;\n    @FXML private TableColumn<Order, String> totalAmountColumn;\n    @FXML private TableColumn<Order, String> statusColumn;\n    @FXML private TableColumn<Order, String> noteColumn;\n    @FXML private TableColumn<Order, Void> actionColumn;\n\n    @FXML private TitledPane detailPane;\n    @FXML private TextField editOrderIdField;\n    @FXML private TextField editStaffIdField;\n    @FXML private DatePicker editOrderDatePicker;\n    @FXML private ComboBox<String> editStatusComboBox;\n    @FXML private TextField editNoteField;\n\n    @FXML private TableView<OrderDetail> orderDetailsTable;\n    @FXML private TableColumn<OrderDetail, Integer> productIdColumn;\n    @FXML private TableColumn<OrderDetail, String> productNameColumn;\n    @FXML private TableColumn<OrderDetail, String> sizeColumn;\n    @FXML private TableColumn<OrderDetail, Integer> quantityColumn;\n    @FXML private TableColumn<OrderDetail, String> unitPriceColumn;\n    @FXML private TableColumn<OrderDetail, String> subtotalColumn;\n    @FXML private Label totalAmountLabel;\n\n    private OrderDao orderDao;\n    private ProductDAO productDAO;\n    private ObservableList<Order> ordersList = FXCollections.observableArrayList();\n    private ObservableList<Order> filteredOrdersList = FXCollections.observableArrayList();\n    private ObservableList<OrderDetail> detailsList = FXCollections.observableArrayList();\n    private Order currentEditingOrder;\n    private DecimalFormat currencyFormat = new DecimalFormat(\"#,###.## VND\");\n    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\n    private Connection connection;\n\n    public void setConnection(Connection connection) {\n        System.out.println(\"=== DEBUG: setConnection() được gọi ===\");\n        this.connection = connection;\n        System.out.println(\"DEBUG: Connection đã được set: \" + (connection != null ? \"Thành công\" : \"Null\"));\n\n        this.orderDao = new OrderDao(connection);\n        System.out.println(\"DEBUG: OrderDao đã được khởi tạo\");\n\n        loadOrders();\n    }\n\n    @FXML\n    public void initialize() {\n        System.out.println(\"=== DEBUG: initialize() bắt đầu ===\");\n\n        // Khởi tạo ComboBox\n        ObservableList<String> statusOptions = FXCollections.observableArrayList(\n                \"Tất cả\", \"Pending\", \"Completed\", \"Cancelled\"\n        );\n        filterStatusComboBox.setItems(statusOptions);\n        filterStatusComboBox.setValue(\"Tất cả\");\n\n        editStatusComboBox.setItems(FXCollections.observableArrayList(\n                \"Pending\", \"Completed\", \"Cancelled\"\n        ));\n\n        // Cấu hình bảng đơn hàng\n        setupOrdersTable();\n\n        // Cấu hình bảng chi tiết đơn hàng\n        setupOrderDetailsTable();\n\n        // THÊM DEBUG: Kiểm tra connection\n        System.out.println(\"DEBUG: Connection trong initialize(): \" + (connection != null ? \"Có\" : \"NULL\"));\n        System.out.println(\"DEBUG: OrderDao trong initialize(): \" + (orderDao != null ? \"Có\" : \"NULL\"));\n\n        // Nếu connection chưa có thì thử tạo connection tự động\n        if (connection == null) {\n            System.out.println(\"DEBUG: Connection chưa có, thử tạo connection tự động\");\n            try {\n                System.out.println(\"DEBUG: Đang gọi DBConnection.getConnection()...\");\n                Connection conn = DBConnection.getConnection();\n                System.out.println(\"DEBUG: DBConnection.getConnection() returned: \" + conn);\n\n                if (conn != null) {\n                    System.out.println(\"DEBUG: Connection thành công, khởi tạo OrderDao...\");\n                    this.connection = conn;\n                    this.orderDao = new OrderDao(conn);\n                    this.productDAO = new ProductDAO(conn);\n                    System.out.println(\"DEBUG: Đã tạo connection, OrderDao và ProductDAO tự động thành công\");\n                    loadOrders();\n                } else {\n                    System.out.println(\"DEBUG: Connection trả về null\");\n                }\n            } catch (Exception e) {\n                System.out.println(\"DEBUG: Exception khi tạo connection: \" + e.getClass().getName());\n                System.out.println(\"DEBUG: Exception message: \" + e.getMessage());\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(\"DEBUG: initialize() hoàn thành\");\n    }\n\n    private void setupOrdersTable() {\n        orderIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\n        staffIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"staffId\"));\n\n        orderDateColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(cellData.getValue().getOrderDate().format(dateTimeFormatter))\n        );\n\n        totalAmountColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getTotalAmount()))\n        );\n\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\n        noteColumn.setCellValueFactory(new PropertyValueFactory<>(\"note\"));\n\n        // Thêm nút hành động\n        setupActionColumn();\n\n        // Xử lý double click để xem chi tiết\n        ordersTable.setRowFactory(tv -> {\n            TableRow<Order> row = new TableRow<>();\n            row.setOnMouseClicked(event -> {\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\n                    loadOrderDetails(row.getItem());\n                }\n            });\n            return row;\n        });\n    }\n\n    private void setupActionColumn() {\n        Callback<TableColumn<Order, Void>, TableCell<Order, Void>> cellFactory = new Callback<>() {\n            @Override\n            public TableCell<Order, Void> call(final TableColumn<Order, Void> param) {\n                final TableCell<Order, Void> cell = new TableCell<>() {\n                    private final Button editBtn = new Button(\"Sửa\");\n                    private final Button deleteBtn = new Button(\"Xóa\");\n\n                    {\n                        editBtn.setStyle(\"-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-cursor: hand;\");\n                        deleteBtn.setStyle(\"-fx-background-color: #dc3545; -fx-text-fill: white; -fx-cursor: hand;\");\n\n                        editBtn.setOnAction(event -> {\n                            Order order = getTableView().getItems().get(getIndex());\n                            loadOrderDetails(order);\n                        });\n\n                        deleteBtn.setOnAction(event -> {\n                            Order order = getTableView().getItems().get(getIndex());\n                            handleDeleteOrder(order);\n                        });\n                    }\n\n                    @Override\n                    protected void updateItem(Void item, boolean empty) {\n                        super.updateItem(item, empty);\n                        if (empty) {\n                            setGraphic(null);\n                        } else {\n                            HBox hbox = new HBox(10);\n                            hbox.getChildren().addAll(editBtn, deleteBtn);\n                            setGraphic(hbox);\n                        }\n                    }\n                };\n                return cell;\n            }\n        };\n\n        actionColumn.setCellFactory(cellFactory);\n    }\n\n    private void setupOrderDetailsTable() {\n        productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\n        quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\n\n        unitPriceColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice()))\n        );\n\n        subtotalColumn.setCellValueFactory(cellData -> {\n            OrderDetail detail = cellData.getValue();\n            double subtotal = detail.getQuantity() * detail.getUnitPrice();\n            return new SimpleStringProperty(currencyFormat.format(subtotal));\n        });\n    }\n\n    private void loadOrders() {\n        System.out.println(\"=== DEBUG: loadOrders() bắt đầu ===\");\n\n        if (orderDao == null) {\n            System.out.println(\"DEBUG: orderDao is null, không thể load orders\");\n            return;\n        }\n\n        try {\n            List<Order> orders = orderDao.getAllOrders();\n            System.out.println(\"DEBUG: Số lượng orders lấy được: \" + (orders != null ? orders.size() : 0));\n\n            if (orders != null) {\n                ordersList.setAll(orders);\n                filteredOrdersList.setAll(orders);\n                ordersTable.setItems(filteredOrdersList);\n                System.out.println(\"DEBUG: Đã load \" + orders.size() + \" orders vào table\");\n            } else {\n                System.out.println(\"DEBUG: getAllOrders() trả về null\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"DEBUG: Lỗi trong loadOrders(): \" + e.getMessage());\n            e.printStackTrace();\n        }\n\n        System.out.println(\"DEBUG: loadOrders() hoàn thành\");\n    }\n\n    @FXML\n    private void handleSearch() {\n        System.out.println(\"=== DEBUG: handleSearch() được gọi ===\");\n\n        if (ordersList == null || ordersList.isEmpty()) {\n            System.out.println(\"DEBUG: ordersList is null or empty\");\n            showAlert(\"Không có dữ liệu để tìm kiếm\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        String searchText = searchField.getText().toLowerCase();\n        String selectedStatus = filterStatusComboBox.getValue();\n\n        System.out.println(\"DEBUG: Search text: \" + searchText + \", Status: \" + selectedStatus);\n\n        List<Order> filtered = ordersList.stream()\n                .filter(order -> {\n                    boolean matchesSearch = searchText.isEmpty() ||\n                            String.valueOf(order.getOrderId()).contains(searchText) ||\n                            String.valueOf(order.getStaffId()).contains(searchText) ||\n                            (order.getNote() != null && order.getNote().toLowerCase().contains(searchText));\n\n                    boolean matchesStatus = \"Tất cả\".equals(selectedStatus) ||\n                            order.getStatus().equals(selectedStatus);\n\n                    return matchesSearch && matchesStatus;\n                })\n                .collect(Collectors.toList());\n\n        System.out.println(\"DEBUG: Số orders sau khi filter: \" + filtered.size());\n        filteredOrdersList.setAll(filtered);\n    }\n\n    @FXML\n    private void handleRefresh() {\n        searchField.clear();\n        filterStatusComboBox.setValue(\"Tất cả\");\n        loadOrders();\n        detailPane.setExpanded(false);\n    }\n\n    private void loadOrderDetails(Order order) {\n        currentEditingOrder = order;\n\n        // Load thông tin order\n        editOrderIdField.setText(String.valueOf(order.getOrderId()));\n        editStaffIdField.setText(String.valueOf(order.getStaffId()));\n        editOrderDatePicker.setValue(order.getOrderDate().toLocalDate());\n        editStatusComboBox.setValue(order.getStatus());\n        editNoteField.setText(order.getNote());\n\n        // Load chi tiết order\n        List<OrderDetail> details = orderDao.getOrderDetails(order.getOrderId());\n\n        // Set tên sản phẩm cho mỗi OrderDetail\n        if (productDAO != null) {\n            for (OrderDetail detail : details) {\n                try {\n                    Product product = productDAO.getProductById(detail.getProductId());\n                    if (product != null) {\n                        detail.setProductName(product.getNameProducts());\n                    }\n                } catch (Exception e) {\n                    System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\n                }\n            }\n        }\n\n        detailsList = FXCollections.observableArrayList(details);\n        orderDetailsTable.setItems(detailsList);\n\n        // Tính tổng tiền\n        updateTotalAmount();\n\n        // Mở panel chi tiết\n        detailPane.setExpanded(true);\n    }\n\n    private void updateTotalAmount() {\n        double total = detailsList.stream()\n                .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\n                .sum();\n        totalAmountLabel.setText(currencyFormat.format(total));\n    }\n\n    @FXML\n    private void handleUpdateOrder() {\n        if (currentEditingOrder == null) {\n            showAlert(\"Vui lòng chọn đơn hàng cần cập nhật\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        try {\n            // Lấy thông tin mới\n            int staffId = Integer.parseInt(editStaffIdField.getText());\n            LocalDateTime orderDate = LocalDateTime.of(editOrderDatePicker.getValue(), LocalTime.now());\n            String status = editStatusComboBox.getValue();\n            String note = editNoteField.getText();\n\n            // Tạo order mới với thông tin cập nhật\n            Order updatedOrder = new Order(\n                    currentEditingOrder.getOrderId(),\n                    staffId,\n                    orderDate,\n                    0, // Sẽ tính lại\n                    status,\n                    note\n            );\n\n            // Tính tổng tiền\n            double total = detailsList.stream()\n                    .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\n                    .sum();\n            updatedOrder.setTotalAmount(total);\n\n            // Cập nhật vào database\n            boolean success = orderDao.updateOrder(updatedOrder, detailsList);\n\n            if (success) {\n                showAlert(\"Cập nhật đơn hàng thành công!\", Alert.AlertType.INFORMATION);\n                loadOrders(); // Reload danh sách\n                detailPane.setExpanded(false);\n            } else {\n                showAlert(\"Cập nhật thất bại. Vui lòng thử lại.\", Alert.AlertType.ERROR);\n            }\n\n        } catch (NumberFormatException e) {\n            showAlert(\"Vui lòng nhập đúng định dạng số cho mã nhân viên\", Alert.AlertType.ERROR);\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(\"Lỗi: \" + e.getMessage(), Alert.AlertType.ERROR);\n        }\n    }\n\n    @FXML\n    private void handleCancelEdit() {\n        detailPane.setExpanded(false);\n        currentEditingOrder = null;\n        clearEditForm();\n    }\n\n    private void handleDeleteOrder(Order order) {\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n        alert.setTitle(\"Xác nhận xóa\");\n        alert.setHeaderText(\"Bạn có chắc chắn muốn xóa đơn hàng #\" + order.getOrderId() + \"?\");\n        alert.setContentText(\"Hành động này không thể hoàn tác.\");\n\n        Optional<ButtonType> result = alert.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            // Ở đây bạn có thể thêm phương thức deleteOrder trong OrderDao\n            // Tạm thời có thể cập nhật status thành \"Cancelled\"\n            boolean success = orderDao.updateOrderStatus(order.getOrderId(), \"Cancelled\");\n            if (success) {\n                showAlert(\"Đã hủy đơn hàng thành công!\", Alert.AlertType.INFORMATION);\n                loadOrders();\n            } else {\n                showAlert(\"Không thể hủy đơn hàng.\", Alert.AlertType.ERROR);\n            }\n        }\n    }\n\n    private void clearEditForm() {\n        editOrderIdField.clear();\n        editStaffIdField.clear();\n        editOrderDatePicker.setValue(null);\n        editStatusComboBox.setValue(null);\n        editNoteField.clear();\n        detailsList.clear();\n        totalAmountLabel.setText(\"0 VND\");\n    }\n\n    private void showAlert(String message, Alert.AlertType type) {\n        Alert alert = new Alert(type);\n        alert.setTitle(\"Thông báo\");\n        alert.setContentText(message);\n        alert.showAndWait();\n    }\n\n    @FXML\n    private void handleAddProduct() {\n        if (currentEditingOrder == null) {\n            showAlert(\"Vui lòng chọn đơn hàng trước khi thêm sản phẩm\", Alert.AlertType.WARNING);\n            return;\n        }\n        showAddProductDialog();\n    }\n\n    @FXML\n    private void handleEditProduct() {\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\n        if (selected == null) {\n            showAlert(\"Vui lòng chọn sản phẩm cần sửa\", Alert.AlertType.WARNING);\n            return;\n        }\n        showEditProductDialog(selected);\n    }\n\n    @FXML\n    private void handleDeleteProduct() {\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\n        if (selected == null) {\n            showAlert(\"Vui lòng chọn sản phẩm cần xóa\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);\n        confirm.setTitle(\"Xác nhận xóa\");\n        confirm.setHeaderText(\"Xóa sản phẩm khỏi đơn hàng?\");\n        confirm.setContentText(\"Bạn có chắc chắn muốn xóa sản phẩm này?\");\n\n        Optional<ButtonType> result = confirm.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            detailsList.remove(selected);\n            updateTotalAmount();\n        }\n    }\n\n    private void showAddProductDialog() {\n        Stage dialog = new Stage();\n        dialog.initModality(Modality.APPLICATION_MODAL);\n        dialog.setTitle(\"Thêm sản phẩm vào đơn hàng\");\n\n        VBox vbox = new VBox(15);\n        vbox.setPadding(new Insets(20));\n        vbox.setAlignment(Pos.CENTER);\n\n        // ComboBox chọn sản phẩm\n        Label lblProduct = new Label(\"Chọn sản phẩm:\");\n        ComboBox<Product> cbProducts = new ComboBox<>();\n\n        try {\n            List<Product> products = productDAO.getAllProducts();\n            cbProducts.setItems(FXCollections.observableArrayList(products));\n            cbProducts.setConverter(new javafx.util.StringConverter<Product>() {\n                @Override\n                public String toString(Product product) {\n                    return product != null ? product.getNameProducts() + \" - \" + currencyFormat.format(product.getPrice()) : \"\";\n                }\n                @Override\n                public Product fromString(String string) {\n                    return null;\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // ComboBox chọn size\n        Label lblSize = new Label(\"Chọn size:\");\n        ComboBox<String> cbSize = new ComboBox<>();\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\n        cbSize.setValue(\"M\");\n\n        // Spinner số lượng\n        Label lblQuantity = new Label(\"Số lượng:\");\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, 1);\n        spinQuantity.setEditable(true);\n\n        // Buttons\n        HBox buttonBox = new HBox(10);\n        buttonBox.setAlignment(Pos.CENTER);\n\n        Button btnAdd = new Button(\"Thêm\");\n        btnAdd.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\n        btnAdd.setOnAction(e -> {\n            Product selectedProduct = cbProducts.getValue();\n            if (selectedProduct == null) {\n                showAlert(\"Vui lòng chọn sản phẩm\", Alert.AlertType.WARNING);\n                return;\n            }\n\n            OrderDetail newDetail = new OrderDetail();\n            newDetail.setProductId(selectedProduct.getId());\n            newDetail.setProductName(selectedProduct.getNameProducts());\n            newDetail.setSize(cbSize.getValue());\n            newDetail.setQuantity(spinQuantity.getValue());\n            newDetail.setUnitPrice(selectedProduct.getPrice());\n\n            // Kiểm tra xem sản phẩm đã tồn tại chưa\n            OrderDetail existing = detailsList.stream()\n                    .filter(d -> d.getProductId() == newDetail.getProductId() &&\n                            d.getSize().equals(newDetail.getSize()))\n                    .findFirst()\n                    .orElse(null);\n\n            if (existing != null) {\n                existing.setQuantity(existing.getQuantity() + newDetail.getQuantity());\n                orderDetailsTable.refresh();\n            } else {\n                detailsList.add(newDetail);\n            }\n\n            updateTotalAmount();\n            dialog.close();\n        });\n\n        Button btnCancel = new Button(\"Hủy\");\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\n        btnCancel.setOnAction(e -> dialog.close());\n\n        buttonBox.getChildren().addAll(btnAdd, btnCancel);\n\n        vbox.getChildren().addAll(\n                lblProduct, cbProducts,\n                lblSize, cbSize,\n                lblQuantity, spinQuantity,\n                buttonBox\n        );\n\n        Scene scene = new Scene(vbox, 400, 300);\n        dialog.setScene(scene);\n        dialog.showAndWait();\n    }\n\n    private void showEditProductDialog(OrderDetail detail) {\n        Stage dialog = new Stage();\n        dialog.initModality(Modality.APPLICATION_MODAL);\n        dialog.setTitle(\"Sửa sản phẩm\");\n\n        VBox vbox = new VBox(15);\n        vbox.setPadding(new Insets(20));\n        vbox.setAlignment(Pos.CENTER);\n\n        // Hiển thị tên sản phẩm\n        Label lblProduct = new Label(\"Sản phẩm: \" + detail.getProductName());\n        lblProduct.setStyle(\"-fx-font-weight: bold;\");\n\n        // ComboBox size\n        Label lblSize = new Label(\"Size:\");\n        ComboBox<String> cbSize = new ComboBox<>();\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\n        cbSize.setValue(detail.getSize());\n\n        // Spinner số lượng\n        Label lblQuantity = new Label(\"Số lượng:\");\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, detail.getQuantity());\n        spinQuantity.setEditable(true);\n\n        // Buttons\n        HBox buttonBox = new HBox(10);\n        buttonBox.setAlignment(Pos.CENTER);\n\n        Button btnSave = new Button(\"Lưu\");\n        btnSave.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\n        btnSave.setOnAction(e -> {\n            detail.setSize(cbSize.getValue());\n            detail.setQuantity(spinQuantity.getValue());\n            orderDetailsTable.refresh();\n            updateTotalAmount();\n            dialog.close();\n        });\n\n        Button btnCancel = new Button(\"Hủy\");\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\n        btnCancel.setOnAction(e -> dialog.close());\n\n        buttonBox.getChildren().addAll(btnSave, btnCancel);\n\n        vbox.getChildren().addAll(\n                lblProduct,\n                lblSize, cbSize,\n                lblQuantity, spinQuantity,\n                buttonBox\n        );\n\n        Scene scene = new Scene(vbox, 350, 250);\n        dialog.setScene(scene);\n        dialog.showAndWait();\n    }\n}",
                    "language": "java"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/dao/ProductDAO.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/ProductController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\resources\\views\\products\\Products.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\products\\Products.fxml",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "sources": []
                    },
                    {
                        "path": "pom.xml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\pom.xml",
                        "sources": []
                    },
                    {
                        "path": ".gitignore",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": ".mvn\\wrapper\\maven-wrapper.properties",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\.mvn\\wrapper\\maven-wrapper.properties",
                        "sources": []
                    },
                    {
                        "path": "src/main/resources/views/Order/OrderUpdate.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\Order\\OrderUpdate.fxml",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "fsPath": "D:/STUDY-HUFLIT/CoffeeShop/coffeeShop/src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "content": "package com.coffeeshop.coffeeshop.controller;\n\nimport com.coffeeshop.coffeeshop.dao.OrderDao;\nimport com.coffeeshop.coffeeshop.dao.ProductDAO;\nimport com.coffeeshop.coffeeshop.model.Order;\nimport com.coffeeshop.coffeeshop.model.OrderDetail;\nimport com.coffeeshop.coffeeshop.model.Product;\nimport com.coffeeshop.coffeeshop.util.DBConnection;\nimport javafx.beans.property.SimpleDoubleProperty;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\nimport javafx.util.Callback;\n\nimport java.sql.Connection;\nimport java.text.DecimalFormat;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class OrderUpdateController {\n\n    @FXML private TextField searchField;\n    @FXML private ComboBox<String> filterStatusComboBox;\n    @FXML private TableView<Order> ordersTable;\n    @FXML private TableColumn<Order, Integer> orderIdColumn;\n    @FXML private TableColumn<Order, Integer> staffIdColumn;\n    @FXML private TableColumn<Order, String> orderDateColumn;\n    @FXML private TableColumn<Order, String> totalAmountColumn;\n    @FXML private TableColumn<Order, String> statusColumn;\n    @FXML private TableColumn<Order, String> noteColumn;\n    @FXML private TableColumn<Order, Void> actionColumn;\n\n    @FXML private TitledPane detailPane;\n    @FXML private TextField editOrderIdField;\n    @FXML private TextField editStaffIdField;\n    @FXML private DatePicker editOrderDatePicker;\n    @FXML private ComboBox<String> editStatusComboBox;\n    @FXML private TextField editNoteField;\n\n    @FXML private TableView<OrderDetail> orderDetailsTable;\n    @FXML private TableColumn<OrderDetail, Integer> productIdColumn;\n    @FXML private TableColumn<OrderDetail, String> productNameColumn;\n    @FXML private TableColumn<OrderDetail, String> sizeColumn;\n    @FXML private TableColumn<OrderDetail, Integer> quantityColumn;\n    @FXML private TableColumn<OrderDetail, String> unitPriceColumn;\n    @FXML private TableColumn<OrderDetail, String> subtotalColumn;\n    @FXML private Label totalAmountLabel;\n\n    private OrderDao orderDao;\n    private ProductDAO productDAO;\n    private ObservableList<Order> ordersList = FXCollections.observableArrayList();\n    private ObservableList<Order> filteredOrdersList = FXCollections.observableArrayList();\n    private ObservableList<OrderDetail> detailsList = FXCollections.observableArrayList();\n    private Order currentEditingOrder;\n    private DecimalFormat currencyFormat = new DecimalFormat(\"#,###.## VND\");\n    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\n    private Connection connection;\n\n    public void setConnection(Connection connection) {\n        System.out.println(\"=== DEBUG: setConnection() được gọi ===\");\n        this.connection = connection;\n        System.out.println(\"DEBUG: Connection đã được set: \" + (connection != null ? \"Thành công\" : \"Null\"));\n\n        this.orderDao = new OrderDao(connection);\n        System.out.println(\"DEBUG: OrderDao đã được khởi tạo\");\n\n        loadOrders();\n    }\n\n    @FXML\n    public void initialize() {\n        System.out.println(\"=== DEBUG: initialize() bắt đầu ===\");\n\n        // Khởi tạo ComboBox\n        ObservableList<String> statusOptions = FXCollections.observableArrayList(\n                \"Tất cả\", \"Pending\", \"Completed\", \"Cancelled\"\n        );\n        filterStatusComboBox.setItems(statusOptions);\n        filterStatusComboBox.setValue(\"Tất cả\");\n\n        editStatusComboBox.setItems(FXCollections.observableArrayList(\n                \"Pending\", \"Completed\", \"Cancelled\"\n        ));\n\n        // Cấu hình bảng đơn hàng\n        setupOrdersTable();\n\n        // Cấu hình bảng chi tiết đơn hàng\n        setupOrderDetailsTable();\n\n        // THÊM DEBUG: Kiểm tra connection\n        System.out.println(\"DEBUG: Connection trong initialize(): \" + (connection != null ? \"Có\" : \"NULL\"));\n        System.out.println(\"DEBUG: OrderDao trong initialize(): \" + (orderDao != null ? \"Có\" : \"NULL\"));\n\n        // Nếu connection chưa có thì thử tạo connection tự động\n        if (connection == null) {\n            System.out.println(\"DEBUG: Connection chưa có, thử tạo connection tự động\");\n            try {\n                System.out.println(\"DEBUG: Đang gọi DBConnection.getConnection()...\");\n                Connection conn = DBConnection.getConnection();\n                System.out.println(\"DEBUG: DBConnection.getConnection() returned: \" + conn);\n\n                if (conn != null) {\n                    System.out.println(\"DEBUG: Connection thành công, khởi tạo OrderDao...\");\n                    this.connection = conn;\n                    this.orderDao = new OrderDao(conn);\n                    this.productDAO = new ProductDAO(conn);\n                    System.out.println(\"DEBUG: Đã tạo connection, OrderDao và ProductDAO tự động thành công\");\n                    loadOrders();\n                } else {\n                    System.out.println(\"DEBUG: Connection trả về null\");\n                }\n            } catch (Exception e) {\n                System.out.println(\"DEBUG: Exception khi tạo connection: \" + e.getClass().getName());\n                System.out.println(\"DEBUG: Exception message: \" + e.getMessage());\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(\"DEBUG: initialize() hoàn thành\");\n    }\n\n    private void setupOrdersTable() {\n        orderIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\n        staffIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"staffId\"));\n\n        orderDateColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(cellData.getValue().getOrderDate().format(dateTimeFormatter))\n        );\n\n        totalAmountColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getTotalAmount()))\n        );\n\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\n        noteColumn.setCellValueFactory(new PropertyValueFactory<>(\"note\"));\n\n        // Thêm nút hành động\n        setupActionColumn();\n\n        // Xử lý double click để xem chi tiết\n        ordersTable.setRowFactory(tv -> {\n            TableRow<Order> row = new TableRow<>();\n            row.setOnMouseClicked(event -> {\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\n                    loadOrderDetails(row.getItem());\n                }\n            });\n            return row;\n        });\n    }\n\n    private void setupActionColumn() {\n        Callback<TableColumn<Order, Void>, TableCell<Order, Void>> cellFactory = new Callback<>() {\n            @Override\n            public TableCell<Order, Void> call(final TableColumn<Order, Void> param) {\n                final TableCell<Order, Void> cell = new TableCell<>() {\n                    private final Button editBtn = new Button(\"Sửa\");\n                    private final Button deleteBtn = new Button(\"Xóa\");\n\n                    {\n                        editBtn.setStyle(\"-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-cursor: hand;\");\n                        deleteBtn.setStyle(\"-fx-background-color: #dc3545; -fx-text-fill: white; -fx-cursor: hand;\");\n\n                        editBtn.setOnAction(event -> {\n                            Order order = getTableView().getItems().get(getIndex());\n                            loadOrderDetails(order);\n                        });\n\n                        deleteBtn.setOnAction(event -> {\n                            Order order = getTableView().getItems().get(getIndex());\n                            handleDeleteOrder(order);\n                        });\n                    }\n\n                    @Override\n                    protected void updateItem(Void item, boolean empty) {\n                        super.updateItem(item, empty);\n                        if (empty) {\n                            setGraphic(null);\n                        } else {\n                            HBox hbox = new HBox(10);\n                            hbox.getChildren().addAll(editBtn, deleteBtn);\n                            setGraphic(hbox);\n                        }\n                    }\n                };\n                return cell;\n            }\n        };\n\n        actionColumn.setCellFactory(cellFactory);\n    }\n\n    private void setupOrderDetailsTable() {\n        productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\n        quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\n\n        unitPriceColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice()))\n        );\n\n        subtotalColumn.setCellValueFactory(cellData -> {\n            OrderDetail detail = cellData.getValue();\n            double subtotal = detail.getQuantity() * detail.getUnitPrice();\n            return new SimpleStringProperty(currencyFormat.format(subtotal));\n        });\n    }\n\n    private void loadOrders() {\n        System.out.println(\"=== DEBUG: loadOrders() bắt đầu ===\");\n\n        if (orderDao == null) {\n            System.out.println(\"DEBUG: orderDao is null, không thể load orders\");\n            return;\n        }\n\n        try {\n            List<Order> orders = orderDao.getAllOrders();\n            System.out.println(\"DEBUG: Số lượng orders lấy được: \" + (orders != null ? orders.size() : 0));\n\n            if (orders != null) {\n                ordersList.setAll(orders);\n                filteredOrdersList.setAll(orders);\n                ordersTable.setItems(filteredOrdersList);\n                System.out.println(\"DEBUG: Đã load \" + orders.size() + \" orders vào table\");\n            } else {\n                System.out.println(\"DEBUG: getAllOrders() trả về null\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"DEBUG: Lỗi trong loadOrders(): \" + e.getMessage());\n            e.printStackTrace();\n        }\n\n        System.out.println(\"DEBUG: loadOrders() hoàn thành\");\n    }\n\n    @FXML\n    private void handleSearch() {\n        System.out.println(\"=== DEBUG: handleSearch() được gọi ===\");\n\n        if (ordersList == null || ordersList.isEmpty()) {\n            System.out.println(\"DEBUG: ordersList is null or empty\");\n            showAlert(\"Không có dữ liệu để tìm kiếm\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        String searchText = searchField.getText().toLowerCase();\n        String selectedStatus = filterStatusComboBox.getValue();\n\n        System.out.println(\"DEBUG: Search text: \" + searchText + \", Status: \" + selectedStatus);\n\n        List<Order> filtered = ordersList.stream()\n                .filter(order -> {\n                    boolean matchesSearch = searchText.isEmpty() ||\n                            String.valueOf(order.getOrderId()).contains(searchText) ||\n                            String.valueOf(order.getStaffId()).contains(searchText) ||\n                            (order.getNote() != null && order.getNote().toLowerCase().contains(searchText));\n\n                    boolean matchesStatus = \"Tất cả\".equals(selectedStatus) ||\n                            order.getStatus().equals(selectedStatus);\n\n                    return matchesSearch && matchesStatus;\n                })\n                .collect(Collectors.toList());\n\n        System.out.println(\"DEBUG: Số orders sau khi filter: \" + filtered.size());\n        filteredOrdersList.setAll(filtered);\n    }\n\n    @FXML\n    private void handleRefresh() {\n        searchField.clear();\n        filterStatusComboBox.setValue(\"Tất cả\");\n        loadOrders();\n        detailPane.setExpanded(false);\n    }\n\n    private void loadOrderDetails(Order order) {\n        currentEditingOrder = order;\n\n        // Load thông tin order\n        editOrderIdField.setText(String.valueOf(order.getOrderId()));\n        editStaffIdField.setText(String.valueOf(order.getStaffId()));\n        editOrderDatePicker.setValue(order.getOrderDate().toLocalDate());\n        editStatusComboBox.setValue(order.getStatus());\n        editNoteField.setText(order.getNote());\n\n        // Load chi tiết order\n        List<OrderDetail> details = orderDao.getOrderDetails(order.getOrderId());\n\n        // Set tên sản phẩm cho mỗi OrderDetail\n        if (productDAO != null) {\n            for (OrderDetail detail : details) {\n                try {\n                    Product product = productDAO.getProductById(detail.getProductId());\n                    if (product != null) {\n                        detail.setProductName(product.getNameProducts());\n                    }\n                } catch (Exception e) {\n                    System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\n                }\n            }\n        }\n\n        detailsList = FXCollections.observableArrayList(details);\n        orderDetailsTable.setItems(detailsList);\n\n        // Tính tổng tiền\n        updateTotalAmount();\n\n        // Mở panel chi tiết\n        detailPane.setExpanded(true);\n    }\n\n    private void updateTotalAmount() {\n        double total = detailsList.stream()\n                .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\n                .sum();\n        totalAmountLabel.setText(currencyFormat.format(total));\n    }\n\n    @FXML\n    private void handleUpdateOrder() {\n        if (currentEditingOrder == null) {\n            showAlert(\"Vui lòng chọn đơn hàng cần cập nhật\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        try {\n            // Lấy thông tin mới\n            int staffId = Integer.parseInt(editStaffIdField.getText());\n            LocalDateTime orderDate = LocalDateTime.of(editOrderDatePicker.getValue(), LocalTime.now());\n            String status = editStatusComboBox.getValue();\n            String note = editNoteField.getText();\n\n            // Tạo order mới với thông tin cập nhật\n            Order updatedOrder = new Order(\n                    currentEditingOrder.getOrderId(),\n                    staffId,\n                    orderDate,\n                    0, // Sẽ tính lại\n                    status,\n                    note\n            );\n\n            // Tính tổng tiền\n            double total = detailsList.stream()\n                    .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\n                    .sum();\n            updatedOrder.setTotalAmount(total);\n\n            // Cập nhật vào database\n            boolean success = orderDao.updateOrder(updatedOrder, detailsList);\n\n            if (success) {\n                showAlert(\"Cập nhật đơn hàng thành công!\", Alert.AlertType.INFORMATION);\n                loadOrders(); // Reload danh sách\n                detailPane.setExpanded(false);\n            } else {\n                showAlert(\"Cập nhật thất bại. Vui lòng thử lại.\", Alert.AlertType.ERROR);\n            }\n\n        } catch (NumberFormatException e) {\n            showAlert(\"Vui lòng nhập đúng định dạng số cho mã nhân viên\", Alert.AlertType.ERROR);\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(\"Lỗi: \" + e.getMessage(), Alert.AlertType.ERROR);\n        }\n    }\n\n    @FXML\n    private void handleCancelEdit() {\n        detailPane.setExpanded(false);\n        currentEditingOrder = null;\n        clearEditForm();\n    }\n\n    private void handleDeleteOrder(Order order) {\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n        alert.setTitle(\"Xác nhận xóa\");\n        alert.setHeaderText(\"Bạn có chắc chắn muốn xóa đơn hàng #\" + order.getOrderId() + \"?\");\n        alert.setContentText(\"Hành động này không thể hoàn tác.\");\n\n        Optional<ButtonType> result = alert.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            // Ở đây bạn có thể thêm phương thức deleteOrder trong OrderDao\n            // Tạm thời có thể cập nhật status thành \"Cancelled\"\n            boolean success = orderDao.updateOrderStatus(order.getOrderId(), \"Cancelled\");\n            if (success) {\n                showAlert(\"Đã hủy đơn hàng thành công!\", Alert.AlertType.INFORMATION);\n                loadOrders();\n            } else {\n                showAlert(\"Không thể hủy đơn hàng.\", Alert.AlertType.ERROR);\n            }\n        }\n    }\n\n    private void clearEditForm() {\n        editOrderIdField.clear();\n        editStaffIdField.clear();\n        editOrderDatePicker.setValue(null);\n        editStatusComboBox.setValue(null);\n        editNoteField.clear();\n        detailsList.clear();\n        totalAmountLabel.setText(\"0 VND\");\n    }\n\n    private void showAlert(String message, Alert.AlertType type) {\n        Alert alert = new Alert(type);\n        alert.setTitle(\"Thông báo\");\n        alert.setContentText(message);\n        alert.showAndWait();\n    }\n\n    @FXML\n    private void handleAddProduct() {\n        if (currentEditingOrder == null) {\n            showAlert(\"Vui lòng chọn đơn hàng trước khi thêm sản phẩm\", Alert.AlertType.WARNING);\n            return;\n        }\n        showAddProductDialog();\n    }\n\n    @FXML\n    private void handleEditProduct() {\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\n        if (selected == null) {\n            showAlert(\"Vui lòng chọn sản phẩm cần sửa\", Alert.AlertType.WARNING);\n            return;\n        }\n        showEditProductDialog(selected);\n    }\n\n    @FXML\n    private void handleDeleteProduct() {\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\n        if (selected == null) {\n            showAlert(\"Vui lòng chọn sản phẩm cần xóa\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);\n        confirm.setTitle(\"Xác nhận xóa\");\n        confirm.setHeaderText(\"Xóa sản phẩm khỏi đơn hàng?\");\n        confirm.setContentText(\"Bạn có chắc chắn muốn xóa sản phẩm này?\");\n\n        Optional<ButtonType> result = confirm.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            detailsList.remove(selected);\n            updateTotalAmount();\n        }\n    }\n\n    private void showAddProductDialog() {\n        Stage dialog = new Stage();\n        dialog.initModality(Modality.APPLICATION_MODAL);\n        dialog.setTitle(\"Thêm sản phẩm vào đơn hàng\");\n\n        VBox vbox = new VBox(15);\n        vbox.setPadding(new Insets(20));\n        vbox.setAlignment(Pos.CENTER);\n\n        // ComboBox chọn sản phẩm\n        Label lblProduct = new Label(\"Chọn sản phẩm:\");\n        ComboBox<Product> cbProducts = new ComboBox<>();\n\n        try {\n            List<Product> products = productDAO.getAllProducts();\n            cbProducts.setItems(FXCollections.observableArrayList(products));\n            cbProducts.setConverter(new javafx.util.StringConverter<Product>() {\n                @Override\n                public String toString(Product product) {\n                    return product != null ? product.getNameProducts() + \" - \" + currencyFormat.format(product.getPrice()) : \"\";\n                }\n                @Override\n                public Product fromString(String string) {\n                    return null;\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // ComboBox chọn size\n        Label lblSize = new Label(\"Chọn size:\");\n        ComboBox<String> cbSize = new ComboBox<>();\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\n        cbSize.setValue(\"M\");\n\n        // Spinner số lượng\n        Label lblQuantity = new Label(\"Số lượng:\");\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, 1);\n        spinQuantity.setEditable(true);\n\n        // Buttons\n        HBox buttonBox = new HBox(10);\n        buttonBox.setAlignment(Pos.CENTER);\n\n        Button btnAdd = new Button(\"Thêm\");\n        btnAdd.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\n        btnAdd.setOnAction(e -> {\n            Product selectedProduct = cbProducts.getValue();\n            if (selectedProduct == null) {\n                showAlert(\"Vui lòng chọn sản phẩm\", Alert.AlertType.WARNING);\n                return;\n            }\n\n            OrderDetail newDetail = new OrderDetail();\n            newDetail.setProductId(selectedProduct.getId());\n            newDetail.setProductName(selectedProduct.getNameProducts());\n            newDetail.setSize(cbSize.getValue());\n            newDetail.setQuantity(spinQuantity.getValue());\n            newDetail.setUnitPrice(selectedProduct.getPrice());\n\n            // Kiểm tra xem sản phẩm đã tồn tại chưa\n            OrderDetail existing = detailsList.stream()\n                    .filter(d -> d.getProductId() == newDetail.getProductId() &&\n                            d.getSize().equals(newDetail.getSize()))\n                    .findFirst()\n                    .orElse(null);\n\n            if (existing != null) {\n                existing.setQuantity(existing.getQuantity() + newDetail.getQuantity());\n                orderDetailsTable.refresh();\n            } else {\n                detailsList.add(newDetail);\n            }\n\n            updateTotalAmount();\n            dialog.close();\n        });\n\n        Button btnCancel = new Button(\"Hủy\");\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\n        btnCancel.setOnAction(e -> dialog.close());\n\n        buttonBox.getChildren().addAll(btnAdd, btnCancel);\n\n        vbox.getChildren().addAll(\n                lblProduct, cbProducts,\n                lblSize, cbSize,\n                lblQuantity, spinQuantity,\n                buttonBox\n        );\n\n        Scene scene = new Scene(vbox, 400, 300);\n        dialog.setScene(scene);\n        dialog.showAndWait();\n    }\n\n    private void showEditProductDialog(OrderDetail detail) {\n        Stage dialog = new Stage();\n        dialog.initModality(Modality.APPLICATION_MODAL);\n        dialog.setTitle(\"Sửa sản phẩm\");\n\n        VBox vbox = new VBox(15);\n        vbox.setPadding(new Insets(20));\n        vbox.setAlignment(Pos.CENTER);\n\n        // Hiển thị tên sản phẩm\n        Label lblProduct = new Label(\"Sản phẩm: \" + detail.getProductName());\n        lblProduct.setStyle(\"-fx-font-weight: bold;\");\n\n        // ComboBox size\n        Label lblSize = new Label(\"Size:\");\n        ComboBox<String> cbSize = new ComboBox<>();\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\n        cbSize.setValue(detail.getSize());\n\n        // Spinner số lượng\n        Label lblQuantity = new Label(\"Số lượng:\");\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, detail.getQuantity());\n        spinQuantity.setEditable(true);\n\n        // Buttons\n        HBox buttonBox = new HBox(10);\n        buttonBox.setAlignment(Pos.CENTER);\n\n        Button btnSave = new Button(\"Lưu\");\n        btnSave.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\n        btnSave.setOnAction(e -> {\n            detail.setSize(cbSize.getValue());\n            detail.setQuantity(spinQuantity.getValue());\n            orderDetailsTable.refresh();\n            updateTotalAmount();\n            dialog.close();\n        });\n\n        Button btnCancel = new Button(\"Hủy\");\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\n        btnCancel.setOnAction(e -> dialog.close());\n\n        buttonBox.getChildren().addAll(btnSave, btnCancel);\n\n        vbox.getChildren().addAll(\n                lblProduct,\n                lblSize, cbSize,\n                lblQuantity, spinQuantity,\n                buttonBox\n        );\n\n        Scene scene = new Scene(vbox, 350, 250);\n        dialog.setScene(scene);\n        dialog.showAndWait();\n    }\n}",
                        "language": "java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java"
                    }
                ]
            },
            "createdAt": 1752084138331,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "command",
                                "attrs": {
                                    "label": "explain"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "/explain"
                                    }
                                ]
                            },
                            {
                                "type": "codeBlock",
                                "attrs": {
                                    "language": "java"
                                },
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "productDAO.getProductById(detail.getProductId())"
                                    }
                                ]
                            },
                            {
                                "type": "text",
                                "text": "Cannot resolve method 'getProductById' in 'ProductDAO'"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "71f27614-5cf1-4fc1-a236-9f99acff0b09",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "The terminal message you provided indicates an issue with the Java code snippet:\n\n```java\nproductDAO.getProductById(detail.getProductId())\n```\n\nThe error message:\n\n```\nCannot resolve method 'getProductById' in 'ProductDAO'\n```\n\n### Breakdown and Explanation:\n\n1. **Error Type**: \n   - This is a compilation error indicating that the method `getProductById` is not found in the `ProductDAO` class.\n\n2. **Possible Causes**:\n   - **Method Not Defined**: The `ProductDAO` class does not have a method named `getProductById`. This could be because the method was never implemented or it was removed.\n   - **Typographical Error**: There might be a typo in the method name in the code or in the class definition.\n   - **Incorrect Import**: If there are multiple `ProductDAO` classes in different packages, the wrong one might be imported.\n\n3. **Contextual Analysis**:\n   - From the retrieved code snippets, the `ProductDAO` class does not define a method named `getProductById`. It includes methods like `getAllProducts`, `insert`, `update`, and `delete`, but not `getProductById`.\n   - The `OrderUpdateController` class is attempting to use this method, likely to fetch a product by its ID for order details.\n\n4. **Resolution Steps**:\n   - **Implement the Method**: If the functionality is needed, you should implement the `getProductById` method in the `ProductDAO` class. This method should query the database to retrieve a product based on its ID.\n   - **Check for Typos**: Ensure that the method name is correctly spelled in both the `ProductDAO` class and where it is called.\n   - **Verify Imports**: Make sure the correct `ProductDAO` class is being used if there are multiple classes with the same name.\n\n5. **Example Implementation**:\n   Here is a simple example of how you might implement the `getProductById` method in the `ProductDAO` class:\n\n   ```java\n   public Product getProductById(int productId) throws SQLException {\n       String sql = \"SELECT * FROM products WHERE id = ?\";\n       try (PreparedStatement ps = conn.prepareStatement(sql)) {\n           ps.setInt(1, productId);\n           try (ResultSet rs = ps.executeQuery()) {\n               if (rs.next()) {\n                   Categories category = new Categories(rs.getInt(\"category_id\"), rs.getString(\"nameCategories\"));\n                   return new Product(\n                       rs.getInt(\"id\"),\n                       rs.getString(\"nameProducts\"),\n                       rs.getString(\"descriptionProducts\"),\n                       rs.getDouble(\"price\"),\n                       category,\n                       rs.getBoolean(\"is_active\")\n                   );\n               }\n           }\n       }\n       return null; // or throw an exception if preferred\n   }\n   ```\n\nBy implementing this method, you should resolve the compilation error and allow the `OrderUpdateController` to retrieve product details by ID."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                    "fsPath": "D:/STUDY-HUFLIT/CoffeeShop/coffeeShop/src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                    "content": "package com.coffeeshop.coffeeshop.controller;\n\nimport com.coffeeshop.coffeeshop.dao.OrderDao;\nimport com.coffeeshop.coffeeshop.dao.ProductDAO;\nimport com.coffeeshop.coffeeshop.model.Order;\nimport com.coffeeshop.coffeeshop.model.OrderDetail;\nimport com.coffeeshop.coffeeshop.model.Product;\nimport com.coffeeshop.coffeeshop.util.DBConnection;\nimport javafx.beans.property.SimpleDoubleProperty;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\nimport javafx.util.Callback;\n\nimport java.sql.Connection;\nimport java.text.DecimalFormat;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class OrderUpdateController {\n\n    @FXML private TextField searchField;\n    @FXML private ComboBox<String> filterStatusComboBox;\n    @FXML private TableView<Order> ordersTable;\n    @FXML private TableColumn<Order, Integer> orderIdColumn;\n    @FXML private TableColumn<Order, Integer> staffIdColumn;\n    @FXML private TableColumn<Order, String> orderDateColumn;\n    @FXML private TableColumn<Order, String> totalAmountColumn;\n    @FXML private TableColumn<Order, String> statusColumn;\n    @FXML private TableColumn<Order, String> noteColumn;\n    @FXML private TableColumn<Order, Void> actionColumn;\n\n    @FXML private TitledPane detailPane;\n    @FXML private TextField editOrderIdField;\n    @FXML private TextField editStaffIdField;\n    @FXML private DatePicker editOrderDatePicker;\n    @FXML private ComboBox<String> editStatusComboBox;\n    @FXML private TextField editNoteField;\n\n    @FXML private TableView<OrderDetail> orderDetailsTable;\n    @FXML private TableColumn<OrderDetail, Integer> productIdColumn;\n    @FXML private TableColumn<OrderDetail, String> productNameColumn;\n    @FXML private TableColumn<OrderDetail, String> sizeColumn;\n    @FXML private TableColumn<OrderDetail, Integer> quantityColumn;\n    @FXML private TableColumn<OrderDetail, String> unitPriceColumn;\n    @FXML private TableColumn<OrderDetail, String> subtotalColumn;\n    @FXML private Label totalAmountLabel;\n\n    private OrderDao orderDao;\n    private ProductDAO productDAO;\n    private ObservableList<Order> ordersList = FXCollections.observableArrayList();\n    private ObservableList<Order> filteredOrdersList = FXCollections.observableArrayList();\n    private ObservableList<OrderDetail> detailsList = FXCollections.observableArrayList();\n    private Order currentEditingOrder;\n    private DecimalFormat currencyFormat = new DecimalFormat(\"#,###.## VND\");\n    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\n    private Connection connection;\n\n    public void setConnection(Connection connection) {\n        System.out.println(\"=== DEBUG: setConnection() được gọi ===\");\n        this.connection = connection;\n        System.out.println(\"DEBUG: Connection đã được set: \" + (connection != null ? \"Thành công\" : \"Null\"));\n\n        this.orderDao = new OrderDao(connection);\n        System.out.println(\"DEBUG: OrderDao đã được khởi tạo\");\n\n        loadOrders();\n    }\n\n    @FXML\n    public void initialize() {\n        System.out.println(\"=== DEBUG: initialize() bắt đầu ===\");\n\n        // Khởi tạo ComboBox\n        ObservableList<String> statusOptions = FXCollections.observableArrayList(\n                \"Tất cả\", \"Pending\", \"Completed\", \"Cancelled\"\n        );\n        filterStatusComboBox.setItems(statusOptions);\n        filterStatusComboBox.setValue(\"Tất cả\");\n\n        editStatusComboBox.setItems(FXCollections.observableArrayList(\n                \"Pending\", \"Completed\", \"Cancelled\"\n        ));\n\n        // Cấu hình bảng đơn hàng\n        setupOrdersTable();\n\n        // Cấu hình bảng chi tiết đơn hàng\n        setupOrderDetailsTable();\n\n        // THÊM DEBUG: Kiểm tra connection\n        System.out.println(\"DEBUG: Connection trong initialize(): \" + (connection != null ? \"Có\" : \"NULL\"));\n        System.out.println(\"DEBUG: OrderDao trong initialize(): \" + (orderDao != null ? \"Có\" : \"NULL\"));\n\n        // Nếu connection chưa có thì thử tạo connection tự động\n        if (connection == null) {\n            System.out.println(\"DEBUG: Connection chưa có, thử tạo connection tự động\");\n            try {\n                System.out.println(\"DEBUG: Đang gọi DBConnection.getConnection()...\");\n                Connection conn = DBConnection.getConnection();\n                System.out.println(\"DEBUG: DBConnection.getConnection() returned: \" + conn);\n\n                if (conn != null) {\n                    System.out.println(\"DEBUG: Connection thành công, khởi tạo OrderDao...\");\n                    this.connection = conn;\n                    this.orderDao = new OrderDao(conn);\n                    this.productDAO = new ProductDAO(conn);\n                    System.out.println(\"DEBUG: Đã tạo connection, OrderDao và ProductDAO tự động thành công\");\n                    loadOrders();\n                } else {\n                    System.out.println(\"DEBUG: Connection trả về null\");\n                }\n            } catch (Exception e) {\n                System.out.println(\"DEBUG: Exception khi tạo connection: \" + e.getClass().getName());\n                System.out.println(\"DEBUG: Exception message: \" + e.getMessage());\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(\"DEBUG: initialize() hoàn thành\");\n    }\n\n    private void setupOrdersTable() {\n        orderIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\n        staffIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"staffId\"));\n\n        orderDateColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(cellData.getValue().getOrderDate().format(dateTimeFormatter))\n        );\n\n        totalAmountColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getTotalAmount()))\n        );\n\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\n        noteColumn.setCellValueFactory(new PropertyValueFactory<>(\"note\"));\n\n        // Thêm nút hành động\n        setupActionColumn();\n\n        // Xử lý double click để xem chi tiết\n        ordersTable.setRowFactory(tv -> {\n            TableRow<Order> row = new TableRow<>();\n            row.setOnMouseClicked(event -> {\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\n                    loadOrderDetails(row.getItem());\n                }\n            });\n            return row;\n        });\n    }\n\n    private void setupActionColumn() {\n        Callback<TableColumn<Order, Void>, TableCell<Order, Void>> cellFactory = new Callback<>() {\n            @Override\n            public TableCell<Order, Void> call(final TableColumn<Order, Void> param) {\n                final TableCell<Order, Void> cell = new TableCell<>() {\n                    private final Button editBtn = new Button(\"Sửa\");\n                    private final Button deleteBtn = new Button(\"Xóa\");\n\n                    {\n                        editBtn.setStyle(\"-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-cursor: hand;\");\n                        deleteBtn.setStyle(\"-fx-background-color: #dc3545; -fx-text-fill: white; -fx-cursor: hand;\");\n\n                        editBtn.setOnAction(event -> {\n                            Order order = getTableView().getItems().get(getIndex());\n                            loadOrderDetails(order);\n                        });\n\n                        deleteBtn.setOnAction(event -> {\n                            Order order = getTableView().getItems().get(getIndex());\n                            handleDeleteOrder(order);\n                        });\n                    }\n\n                    @Override\n                    protected void updateItem(Void item, boolean empty) {\n                        super.updateItem(item, empty);\n                        if (empty) {\n                            setGraphic(null);\n                        } else {\n                            HBox hbox = new HBox(10);\n                            hbox.getChildren().addAll(editBtn, deleteBtn);\n                            setGraphic(hbox);\n                        }\n                    }\n                };\n                return cell;\n            }\n        };\n\n        actionColumn.setCellFactory(cellFactory);\n    }\n\n    private void setupOrderDetailsTable() {\n        productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\n        quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\n\n        unitPriceColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice()))\n        );\n\n        subtotalColumn.setCellValueFactory(cellData -> {\n            OrderDetail detail = cellData.getValue();\n            double subtotal = detail.getQuantity() * detail.getUnitPrice();\n            return new SimpleStringProperty(currencyFormat.format(subtotal));\n        });\n    }\n\n    private void loadOrders() {\n        System.out.println(\"=== DEBUG: loadOrders() bắt đầu ===\");\n\n        if (orderDao == null) {\n            System.out.println(\"DEBUG: orderDao is null, không thể load orders\");\n            return;\n        }\n\n        try {\n            List<Order> orders = orderDao.getAllOrders();\n            System.out.println(\"DEBUG: Số lượng orders lấy được: \" + (orders != null ? orders.size() : 0));\n\n            if (orders != null) {\n                ordersList.setAll(orders);\n                filteredOrdersList.setAll(orders);\n                ordersTable.setItems(filteredOrdersList);\n                System.out.println(\"DEBUG: Đã load \" + orders.size() + \" orders vào table\");\n            } else {\n                System.out.println(\"DEBUG: getAllOrders() trả về null\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"DEBUG: Lỗi trong loadOrders(): \" + e.getMessage());\n            e.printStackTrace();\n        }\n\n        System.out.println(\"DEBUG: loadOrders() hoàn thành\");\n    }\n\n    @FXML\n    private void handleSearch() {\n        System.out.println(\"=== DEBUG: handleSearch() được gọi ===\");\n\n        if (ordersList == null || ordersList.isEmpty()) {\n            System.out.println(\"DEBUG: ordersList is null or empty\");\n            showAlert(\"Không có dữ liệu để tìm kiếm\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        String searchText = searchField.getText().toLowerCase();\n        String selectedStatus = filterStatusComboBox.getValue();\n\n        System.out.println(\"DEBUG: Search text: \" + searchText + \", Status: \" + selectedStatus);\n\n        List<Order> filtered = ordersList.stream()\n                .filter(order -> {\n                    boolean matchesSearch = searchText.isEmpty() ||\n                            String.valueOf(order.getOrderId()).contains(searchText) ||\n                            String.valueOf(order.getStaffId()).contains(searchText) ||\n                            (order.getNote() != null && order.getNote().toLowerCase().contains(searchText));\n\n                    boolean matchesStatus = \"Tất cả\".equals(selectedStatus) ||\n                            order.getStatus().equals(selectedStatus);\n\n                    return matchesSearch && matchesStatus;\n                })\n                .collect(Collectors.toList());\n\n        System.out.println(\"DEBUG: Số orders sau khi filter: \" + filtered.size());\n        filteredOrdersList.setAll(filtered);\n    }\n\n    @FXML\n    private void handleRefresh() {\n        searchField.clear();\n        filterStatusComboBox.setValue(\"Tất cả\");\n        loadOrders();\n        detailPane.setExpanded(false);\n    }\n\n    private void loadOrderDetails(Order order) {\n        currentEditingOrder = order;\n\n        // Load thông tin order\n        editOrderIdField.setText(String.valueOf(order.getOrderId()));\n        editStaffIdField.setText(String.valueOf(order.getStaffId()));\n        editOrderDatePicker.setValue(order.getOrderDate().toLocalDate());\n        editStatusComboBox.setValue(order.getStatus());\n        editNoteField.setText(order.getNote());\n\n        // Load chi tiết order\n        List<OrderDetail> details = orderDao.getOrderDetails(order.getOrderId());\n\n        // Set tên sản phẩm cho mỗi OrderDetail\n        if (productDAO != null) {\n            for (OrderDetail detail : details) {\n                try {\n                    Product product = productDAO.getProductById(detail.getProductId());\n                    if (product != null) {\n                        detail.setProductName(product.getNameProducts());\n                    }\n                } catch (Exception e) {\n                    System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\n                }\n            }\n        }\n\n        detailsList = FXCollections.observableArrayList(details);\n        orderDetailsTable.setItems(detailsList);\n\n        // Tính tổng tiền\n        updateTotalAmount();\n\n        // Mở panel chi tiết\n        detailPane.setExpanded(true);\n    }\n\n    private void updateTotalAmount() {\n        double total = detailsList.stream()\n                .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\n                .sum();\n        totalAmountLabel.setText(currencyFormat.format(total));\n    }\n\n    @FXML\n    private void handleUpdateOrder() {\n        if (currentEditingOrder == null) {\n            showAlert(\"Vui lòng chọn đơn hàng cần cập nhật\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        try {\n            // Lấy thông tin mới\n            int staffId = Integer.parseInt(editStaffIdField.getText());\n            LocalDateTime orderDate = LocalDateTime.of(editOrderDatePicker.getValue(), LocalTime.now());\n            String status = editStatusComboBox.getValue();\n            String note = editNoteField.getText();\n\n            // Tạo order mới với thông tin cập nhật\n            Order updatedOrder = new Order(\n                    currentEditingOrder.getOrderId(),\n                    staffId,\n                    orderDate,\n                    0, // Sẽ tính lại\n                    status,\n                    note\n            );\n\n            // Tính tổng tiền\n            double total = detailsList.stream()\n                    .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\n                    .sum();\n            updatedOrder.setTotalAmount(total);\n\n            // Cập nhật vào database\n            boolean success = orderDao.updateOrder(updatedOrder, detailsList);\n\n            if (success) {\n                showAlert(\"Cập nhật đơn hàng thành công!\", Alert.AlertType.INFORMATION);\n                loadOrders(); // Reload danh sách\n                detailPane.setExpanded(false);\n            } else {\n                showAlert(\"Cập nhật thất bại. Vui lòng thử lại.\", Alert.AlertType.ERROR);\n            }\n\n        } catch (NumberFormatException e) {\n            showAlert(\"Vui lòng nhập đúng định dạng số cho mã nhân viên\", Alert.AlertType.ERROR);\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(\"Lỗi: \" + e.getMessage(), Alert.AlertType.ERROR);\n        }\n    }\n\n    @FXML\n    private void handleCancelEdit() {\n        detailPane.setExpanded(false);\n        currentEditingOrder = null;\n        clearEditForm();\n    }\n\n    private void handleDeleteOrder(Order order) {\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n        alert.setTitle(\"Xác nhận xóa\");\n        alert.setHeaderText(\"Bạn có chắc chắn muốn xóa đơn hàng #\" + order.getOrderId() + \"?\");\n        alert.setContentText(\"Hành động này không thể hoàn tác.\");\n\n        Optional<ButtonType> result = alert.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            // Ở đây bạn có thể thêm phương thức deleteOrder trong OrderDao\n            // Tạm thời có thể cập nhật status thành \"Cancelled\"\n            boolean success = orderDao.updateOrderStatus(order.getOrderId(), \"Cancelled\");\n            if (success) {\n                showAlert(\"Đã hủy đơn hàng thành công!\", Alert.AlertType.INFORMATION);\n                loadOrders();\n            } else {\n                showAlert(\"Không thể hủy đơn hàng.\", Alert.AlertType.ERROR);\n            }\n        }\n    }\n\n    private void clearEditForm() {\n        editOrderIdField.clear();\n        editStaffIdField.clear();\n        editOrderDatePicker.setValue(null);\n        editStatusComboBox.setValue(null);\n        editNoteField.clear();\n        detailsList.clear();\n        totalAmountLabel.setText(\"0 VND\");\n    }\n\n    private void showAlert(String message, Alert.AlertType type) {\n        Alert alert = new Alert(type);\n        alert.setTitle(\"Thông báo\");\n        alert.setContentText(message);\n        alert.showAndWait();\n    }\n\n    @FXML\n    private void handleAddProduct() {\n        if (currentEditingOrder == null) {\n            showAlert(\"Vui lòng chọn đơn hàng trước khi thêm sản phẩm\", Alert.AlertType.WARNING);\n            return;\n        }\n        showAddProductDialog();\n    }\n\n    @FXML\n    private void handleEditProduct() {\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\n        if (selected == null) {\n            showAlert(\"Vui lòng chọn sản phẩm cần sửa\", Alert.AlertType.WARNING);\n            return;\n        }\n        showEditProductDialog(selected);\n    }\n\n    @FXML\n    private void handleDeleteProduct() {\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\n        if (selected == null) {\n            showAlert(\"Vui lòng chọn sản phẩm cần xóa\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);\n        confirm.setTitle(\"Xác nhận xóa\");\n        confirm.setHeaderText(\"Xóa sản phẩm khỏi đơn hàng?\");\n        confirm.setContentText(\"Bạn có chắc chắn muốn xóa sản phẩm này?\");\n\n        Optional<ButtonType> result = confirm.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            detailsList.remove(selected);\n            updateTotalAmount();\n        }\n    }\n\n    private void showAddProductDialog() {\n        Stage dialog = new Stage();\n        dialog.initModality(Modality.APPLICATION_MODAL);\n        dialog.setTitle(\"Thêm sản phẩm vào đơn hàng\");\n\n        VBox vbox = new VBox(15);\n        vbox.setPadding(new Insets(20));\n        vbox.setAlignment(Pos.CENTER);\n\n        // ComboBox chọn sản phẩm\n        Label lblProduct = new Label(\"Chọn sản phẩm:\");\n        ComboBox<Product> cbProducts = new ComboBox<>();\n\n        try {\n            List<Product> products = productDAO.getAllProducts();\n            cbProducts.setItems(FXCollections.observableArrayList(products));\n            cbProducts.setConverter(new javafx.util.StringConverter<Product>() {\n                @Override\n                public String toString(Product product) {\n                    return product != null ? product.getNameProducts() + \" - \" + currencyFormat.format(product.getPrice()) : \"\";\n                }\n                @Override\n                public Product fromString(String string) {\n                    return null;\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // ComboBox chọn size\n        Label lblSize = new Label(\"Chọn size:\");\n        ComboBox<String> cbSize = new ComboBox<>();\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\n        cbSize.setValue(\"M\");\n\n        // Spinner số lượng\n        Label lblQuantity = new Label(\"Số lượng:\");\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, 1);\n        spinQuantity.setEditable(true);\n\n        // Buttons\n        HBox buttonBox = new HBox(10);\n        buttonBox.setAlignment(Pos.CENTER);\n\n        Button btnAdd = new Button(\"Thêm\");\n        btnAdd.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\n        btnAdd.setOnAction(e -> {\n            Product selectedProduct = cbProducts.getValue();\n            if (selectedProduct == null) {\n                showAlert(\"Vui lòng chọn sản phẩm\", Alert.AlertType.WARNING);\n                return;\n            }\n\n            OrderDetail newDetail = new OrderDetail();\n            newDetail.setProductId(selectedProduct.getId());\n            newDetail.setProductName(selectedProduct.getNameProducts());\n            newDetail.setSize(cbSize.getValue());\n            newDetail.setQuantity(spinQuantity.getValue());\n            newDetail.setUnitPrice(selectedProduct.getPrice());\n\n            // Kiểm tra xem sản phẩm đã tồn tại chưa\n            OrderDetail existing = detailsList.stream()\n                    .filter(d -> d.getProductId() == newDetail.getProductId() &&\n                            d.getSize().equals(newDetail.getSize()))\n                    .findFirst()\n                    .orElse(null);\n\n            if (existing != null) {\n                existing.setQuantity(existing.getQuantity() + newDetail.getQuantity());\n                orderDetailsTable.refresh();\n            } else {\n                detailsList.add(newDetail);\n            }\n\n            updateTotalAmount();\n            dialog.close();\n        });\n\n        Button btnCancel = new Button(\"Hủy\");\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\n        btnCancel.setOnAction(e -> dialog.close());\n\n        buttonBox.getChildren().addAll(btnAdd, btnCancel);\n\n        vbox.getChildren().addAll(\n                lblProduct, cbProducts,\n                lblSize, cbSize,\n                lblQuantity, spinQuantity,\n                buttonBox\n        );\n\n        Scene scene = new Scene(vbox, 400, 300);\n        dialog.setScene(scene);\n        dialog.showAndWait();\n    }\n\n    private void showEditProductDialog(OrderDetail detail) {\n        Stage dialog = new Stage();\n        dialog.initModality(Modality.APPLICATION_MODAL);\n        dialog.setTitle(\"Sửa sản phẩm\");\n\n        VBox vbox = new VBox(15);\n        vbox.setPadding(new Insets(20));\n        vbox.setAlignment(Pos.CENTER);\n\n        // Hiển thị tên sản phẩm\n        Label lblProduct = new Label(\"Sản phẩm: \" + detail.getProductName());\n        lblProduct.setStyle(\"-fx-font-weight: bold;\");\n\n        // ComboBox size\n        Label lblSize = new Label(\"Size:\");\n        ComboBox<String> cbSize = new ComboBox<>();\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\n        cbSize.setValue(detail.getSize());\n\n        // Spinner số lượng\n        Label lblQuantity = new Label(\"Số lượng:\");\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, detail.getQuantity());\n        spinQuantity.setEditable(true);\n\n        // Buttons\n        HBox buttonBox = new HBox(10);\n        buttonBox.setAlignment(Pos.CENTER);\n\n        Button btnSave = new Button(\"Lưu\");\n        btnSave.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\n        btnSave.setOnAction(e -> {\n            detail.setSize(cbSize.getValue());\n            detail.setQuantity(spinQuantity.getValue());\n            orderDetailsTable.refresh();\n            updateTotalAmount();\n            dialog.close();\n        });\n\n        Button btnCancel = new Button(\"Hủy\");\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\n        btnCancel.setOnAction(e -> dialog.close());\n\n        buttonBox.getChildren().addAll(btnSave, btnCancel);\n\n        vbox.getChildren().addAll(\n                lblProduct,\n                lblSize, cbSize,\n                lblQuantity, spinQuantity,\n                buttonBox\n        );\n\n        Scene scene = new Scene(vbox, 350, 250);\n        dialog.setScene(scene);\n        dialog.showAndWait();\n    }\n}",
                    "language": "java"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/dao/ProductDAO.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/ProductController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\resources\\views\\products\\Products.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\products\\Products.fxml",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "sources": []
                    },
                    {
                        "path": "pom.xml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\pom.xml",
                        "sources": []
                    },
                    {
                        "path": ".gitignore",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": ".mvn\\wrapper\\maven-wrapper.properties",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\.mvn\\wrapper\\maven-wrapper.properties",
                        "sources": []
                    },
                    {
                        "path": "src/main/resources/views/Order/OrderUpdate.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\Order\\OrderUpdate.fxml",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "fsPath": "D:/STUDY-HUFLIT/CoffeeShop/coffeeShop/src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "content": "package com.coffeeshop.coffeeshop.controller;\n\nimport com.coffeeshop.coffeeshop.dao.OrderDao;\nimport com.coffeeshop.coffeeshop.dao.ProductDAO;\nimport com.coffeeshop.coffeeshop.model.Order;\nimport com.coffeeshop.coffeeshop.model.OrderDetail;\nimport com.coffeeshop.coffeeshop.model.Product;\nimport com.coffeeshop.coffeeshop.util.DBConnection;\nimport javafx.beans.property.SimpleDoubleProperty;\nimport javafx.beans.property.SimpleIntegerProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Modality;\nimport javafx.stage.Stage;\nimport javafx.util.Callback;\n\nimport java.sql.Connection;\nimport java.text.DecimalFormat;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\npublic class OrderUpdateController {\n\n    @FXML private TextField searchField;\n    @FXML private ComboBox<String> filterStatusComboBox;\n    @FXML private TableView<Order> ordersTable;\n    @FXML private TableColumn<Order, Integer> orderIdColumn;\n    @FXML private TableColumn<Order, Integer> staffIdColumn;\n    @FXML private TableColumn<Order, String> orderDateColumn;\n    @FXML private TableColumn<Order, String> totalAmountColumn;\n    @FXML private TableColumn<Order, String> statusColumn;\n    @FXML private TableColumn<Order, String> noteColumn;\n    @FXML private TableColumn<Order, Void> actionColumn;\n\n    @FXML private TitledPane detailPane;\n    @FXML private TextField editOrderIdField;\n    @FXML private TextField editStaffIdField;\n    @FXML private DatePicker editOrderDatePicker;\n    @FXML private ComboBox<String> editStatusComboBox;\n    @FXML private TextField editNoteField;\n\n    @FXML private TableView<OrderDetail> orderDetailsTable;\n    @FXML private TableColumn<OrderDetail, Integer> productIdColumn;\n    @FXML private TableColumn<OrderDetail, String> productNameColumn;\n    @FXML private TableColumn<OrderDetail, String> sizeColumn;\n    @FXML private TableColumn<OrderDetail, Integer> quantityColumn;\n    @FXML private TableColumn<OrderDetail, String> unitPriceColumn;\n    @FXML private TableColumn<OrderDetail, String> subtotalColumn;\n    @FXML private Label totalAmountLabel;\n\n    private OrderDao orderDao;\n    private ProductDAO productDAO;\n    private ObservableList<Order> ordersList = FXCollections.observableArrayList();\n    private ObservableList<Order> filteredOrdersList = FXCollections.observableArrayList();\n    private ObservableList<OrderDetail> detailsList = FXCollections.observableArrayList();\n    private Order currentEditingOrder;\n    private DecimalFormat currencyFormat = new DecimalFormat(\"#,###.## VND\");\n    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\n    private Connection connection;\n\n    public void setConnection(Connection connection) {\n        System.out.println(\"=== DEBUG: setConnection() được gọi ===\");\n        this.connection = connection;\n        System.out.println(\"DEBUG: Connection đã được set: \" + (connection != null ? \"Thành công\" : \"Null\"));\n\n        this.orderDao = new OrderDao(connection);\n        System.out.println(\"DEBUG: OrderDao đã được khởi tạo\");\n\n        loadOrders();\n    }\n\n    @FXML\n    public void initialize() {\n        System.out.println(\"=== DEBUG: initialize() bắt đầu ===\");\n\n        // Khởi tạo ComboBox\n        ObservableList<String> statusOptions = FXCollections.observableArrayList(\n                \"Tất cả\", \"Pending\", \"Completed\", \"Cancelled\"\n        );\n        filterStatusComboBox.setItems(statusOptions);\n        filterStatusComboBox.setValue(\"Tất cả\");\n\n        editStatusComboBox.setItems(FXCollections.observableArrayList(\n                \"Pending\", \"Completed\", \"Cancelled\"\n        ));\n\n        // Cấu hình bảng đơn hàng\n        setupOrdersTable();\n\n        // Cấu hình bảng chi tiết đơn hàng\n        setupOrderDetailsTable();\n\n        // THÊM DEBUG: Kiểm tra connection\n        System.out.println(\"DEBUG: Connection trong initialize(): \" + (connection != null ? \"Có\" : \"NULL\"));\n        System.out.println(\"DEBUG: OrderDao trong initialize(): \" + (orderDao != null ? \"Có\" : \"NULL\"));\n\n        // Nếu connection chưa có thì thử tạo connection tự động\n        if (connection == null) {\n            System.out.println(\"DEBUG: Connection chưa có, thử tạo connection tự động\");\n            try {\n                System.out.println(\"DEBUG: Đang gọi DBConnection.getConnection()...\");\n                Connection conn = DBConnection.getConnection();\n                System.out.println(\"DEBUG: DBConnection.getConnection() returned: \" + conn);\n\n                if (conn != null) {\n                    System.out.println(\"DEBUG: Connection thành công, khởi tạo OrderDao...\");\n                    this.connection = conn;\n                    this.orderDao = new OrderDao(conn);\n                    this.productDAO = new ProductDAO(conn);\n                    System.out.println(\"DEBUG: Đã tạo connection, OrderDao và ProductDAO tự động thành công\");\n                    loadOrders();\n                } else {\n                    System.out.println(\"DEBUG: Connection trả về null\");\n                }\n            } catch (Exception e) {\n                System.out.println(\"DEBUG: Exception khi tạo connection: \" + e.getClass().getName());\n                System.out.println(\"DEBUG: Exception message: \" + e.getMessage());\n                e.printStackTrace();\n            }\n        }\n\n        System.out.println(\"DEBUG: initialize() hoàn thành\");\n    }\n\n    private void setupOrdersTable() {\n        orderIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\n        staffIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"staffId\"));\n\n        orderDateColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(cellData.getValue().getOrderDate().format(dateTimeFormatter))\n        );\n\n        totalAmountColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getTotalAmount()))\n        );\n\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\n        noteColumn.setCellValueFactory(new PropertyValueFactory<>(\"note\"));\n\n        // Thêm nút hành động\n        setupActionColumn();\n\n        // Xử lý double click để xem chi tiết\n        ordersTable.setRowFactory(tv -> {\n            TableRow<Order> row = new TableRow<>();\n            row.setOnMouseClicked(event -> {\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\n                    loadOrderDetails(row.getItem());\n                }\n            });\n            return row;\n        });\n    }\n\n    private void setupActionColumn() {\n        Callback<TableColumn<Order, Void>, TableCell<Order, Void>> cellFactory = new Callback<>() {\n            @Override\n            public TableCell<Order, Void> call(final TableColumn<Order, Void> param) {\n                final TableCell<Order, Void> cell = new TableCell<>() {\n                    private final Button editBtn = new Button(\"Sửa\");\n                    private final Button deleteBtn = new Button(\"Xóa\");\n\n                    {\n                        editBtn.setStyle(\"-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-cursor: hand;\");\n                        deleteBtn.setStyle(\"-fx-background-color: #dc3545; -fx-text-fill: white; -fx-cursor: hand;\");\n\n                        editBtn.setOnAction(event -> {\n                            Order order = getTableView().getItems().get(getIndex());\n                            loadOrderDetails(order);\n                        });\n\n                        deleteBtn.setOnAction(event -> {\n                            Order order = getTableView().getItems().get(getIndex());\n                            handleDeleteOrder(order);\n                        });\n                    }\n\n                    @Override\n                    protected void updateItem(Void item, boolean empty) {\n                        super.updateItem(item, empty);\n                        if (empty) {\n                            setGraphic(null);\n                        } else {\n                            HBox hbox = new HBox(10);\n                            hbox.getChildren().addAll(editBtn, deleteBtn);\n                            setGraphic(hbox);\n                        }\n                    }\n                };\n                return cell;\n            }\n        };\n\n        actionColumn.setCellFactory(cellFactory);\n    }\n\n    private void setupOrderDetailsTable() {\n        productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\n        quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\n\n        unitPriceColumn.setCellValueFactory(cellData ->\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice()))\n        );\n\n        subtotalColumn.setCellValueFactory(cellData -> {\n            OrderDetail detail = cellData.getValue();\n            double subtotal = detail.getQuantity() * detail.getUnitPrice();\n            return new SimpleStringProperty(currencyFormat.format(subtotal));\n        });\n    }\n\n    private void loadOrders() {\n        System.out.println(\"=== DEBUG: loadOrders() bắt đầu ===\");\n\n        if (orderDao == null) {\n            System.out.println(\"DEBUG: orderDao is null, không thể load orders\");\n            return;\n        }\n\n        try {\n            List<Order> orders = orderDao.getAllOrders();\n            System.out.println(\"DEBUG: Số lượng orders lấy được: \" + (orders != null ? orders.size() : 0));\n\n            if (orders != null) {\n                ordersList.setAll(orders);\n                filteredOrdersList.setAll(orders);\n                ordersTable.setItems(filteredOrdersList);\n                System.out.println(\"DEBUG: Đã load \" + orders.size() + \" orders vào table\");\n            } else {\n                System.out.println(\"DEBUG: getAllOrders() trả về null\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"DEBUG: Lỗi trong loadOrders(): \" + e.getMessage());\n            e.printStackTrace();\n        }\n\n        System.out.println(\"DEBUG: loadOrders() hoàn thành\");\n    }\n\n    @FXML\n    private void handleSearch() {\n        System.out.println(\"=== DEBUG: handleSearch() được gọi ===\");\n\n        if (ordersList == null || ordersList.isEmpty()) {\n            System.out.println(\"DEBUG: ordersList is null or empty\");\n            showAlert(\"Không có dữ liệu để tìm kiếm\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        String searchText = searchField.getText().toLowerCase();\n        String selectedStatus = filterStatusComboBox.getValue();\n\n        System.out.println(\"DEBUG: Search text: \" + searchText + \", Status: \" + selectedStatus);\n\n        List<Order> filtered = ordersList.stream()\n                .filter(order -> {\n                    boolean matchesSearch = searchText.isEmpty() ||\n                            String.valueOf(order.getOrderId()).contains(searchText) ||\n                            String.valueOf(order.getStaffId()).contains(searchText) ||\n                            (order.getNote() != null && order.getNote().toLowerCase().contains(searchText));\n\n                    boolean matchesStatus = \"Tất cả\".equals(selectedStatus) ||\n                            order.getStatus().equals(selectedStatus);\n\n                    return matchesSearch && matchesStatus;\n                })\n                .collect(Collectors.toList());\n\n        System.out.println(\"DEBUG: Số orders sau khi filter: \" + filtered.size());\n        filteredOrdersList.setAll(filtered);\n    }\n\n    @FXML\n    private void handleRefresh() {\n        searchField.clear();\n        filterStatusComboBox.setValue(\"Tất cả\");\n        loadOrders();\n        detailPane.setExpanded(false);\n    }\n\n    private void loadOrderDetails(Order order) {\n        currentEditingOrder = order;\n\n        // Load thông tin order\n        editOrderIdField.setText(String.valueOf(order.getOrderId()));\n        editStaffIdField.setText(String.valueOf(order.getStaffId()));\n        editOrderDatePicker.setValue(order.getOrderDate().toLocalDate());\n        editStatusComboBox.setValue(order.getStatus());\n        editNoteField.setText(order.getNote());\n\n        // Load chi tiết order\n        List<OrderDetail> details = orderDao.getOrderDetails(order.getOrderId());\n\n        // Set tên sản phẩm cho mỗi OrderDetail\n        if (productDAO != null) {\n            for (OrderDetail detail : details) {\n                try {\n                    Product product = productDAO.getProductById(detail.getProductId());\n                    if (product != null) {\n                        detail.setProductName(product.getNameProducts());\n                    }\n                } catch (Exception e) {\n                    System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\n                }\n            }\n        }\n\n        detailsList = FXCollections.observableArrayList(details);\n        orderDetailsTable.setItems(detailsList);\n\n        // Tính tổng tiền\n        updateTotalAmount();\n\n        // Mở panel chi tiết\n        detailPane.setExpanded(true);\n    }\n\n    private void updateTotalAmount() {\n        double total = detailsList.stream()\n                .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\n                .sum();\n        totalAmountLabel.setText(currencyFormat.format(total));\n    }\n\n    @FXML\n    private void handleUpdateOrder() {\n        if (currentEditingOrder == null) {\n            showAlert(\"Vui lòng chọn đơn hàng cần cập nhật\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        try {\n            // Lấy thông tin mới\n            int staffId = Integer.parseInt(editStaffIdField.getText());\n            LocalDateTime orderDate = LocalDateTime.of(editOrderDatePicker.getValue(), LocalTime.now());\n            String status = editStatusComboBox.getValue();\n            String note = editNoteField.getText();\n\n            // Tạo order mới với thông tin cập nhật\n            Order updatedOrder = new Order(\n                    currentEditingOrder.getOrderId(),\n                    staffId,\n                    orderDate,\n                    0, // Sẽ tính lại\n                    status,\n                    note\n            );\n\n            // Tính tổng tiền\n            double total = detailsList.stream()\n                    .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\n                    .sum();\n            updatedOrder.setTotalAmount(total);\n\n            // Cập nhật vào database\n            boolean success = orderDao.updateOrder(updatedOrder, detailsList);\n\n            if (success) {\n                showAlert(\"Cập nhật đơn hàng thành công!\", Alert.AlertType.INFORMATION);\n                loadOrders(); // Reload danh sách\n                detailPane.setExpanded(false);\n            } else {\n                showAlert(\"Cập nhật thất bại. Vui lòng thử lại.\", Alert.AlertType.ERROR);\n            }\n\n        } catch (NumberFormatException e) {\n            showAlert(\"Vui lòng nhập đúng định dạng số cho mã nhân viên\", Alert.AlertType.ERROR);\n        } catch (Exception e) {\n            e.printStackTrace();\n            showAlert(\"Lỗi: \" + e.getMessage(), Alert.AlertType.ERROR);\n        }\n    }\n\n    @FXML\n    private void handleCancelEdit() {\n        detailPane.setExpanded(false);\n        currentEditingOrder = null;\n        clearEditForm();\n    }\n\n    private void handleDeleteOrder(Order order) {\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\n        alert.setTitle(\"Xác nhận xóa\");\n        alert.setHeaderText(\"Bạn có chắc chắn muốn xóa đơn hàng #\" + order.getOrderId() + \"?\");\n        alert.setContentText(\"Hành động này không thể hoàn tác.\");\n\n        Optional<ButtonType> result = alert.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            // Ở đây bạn có thể thêm phương thức deleteOrder trong OrderDao\n            // Tạm thời có thể cập nhật status thành \"Cancelled\"\n            boolean success = orderDao.updateOrderStatus(order.getOrderId(), \"Cancelled\");\n            if (success) {\n                showAlert(\"Đã hủy đơn hàng thành công!\", Alert.AlertType.INFORMATION);\n                loadOrders();\n            } else {\n                showAlert(\"Không thể hủy đơn hàng.\", Alert.AlertType.ERROR);\n            }\n        }\n    }\n\n    private void clearEditForm() {\n        editOrderIdField.clear();\n        editStaffIdField.clear();\n        editOrderDatePicker.setValue(null);\n        editStatusComboBox.setValue(null);\n        editNoteField.clear();\n        detailsList.clear();\n        totalAmountLabel.setText(\"0 VND\");\n    }\n\n    private void showAlert(String message, Alert.AlertType type) {\n        Alert alert = new Alert(type);\n        alert.setTitle(\"Thông báo\");\n        alert.setContentText(message);\n        alert.showAndWait();\n    }\n\n    @FXML\n    private void handleAddProduct() {\n        if (currentEditingOrder == null) {\n            showAlert(\"Vui lòng chọn đơn hàng trước khi thêm sản phẩm\", Alert.AlertType.WARNING);\n            return;\n        }\n        showAddProductDialog();\n    }\n\n    @FXML\n    private void handleEditProduct() {\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\n        if (selected == null) {\n            showAlert(\"Vui lòng chọn sản phẩm cần sửa\", Alert.AlertType.WARNING);\n            return;\n        }\n        showEditProductDialog(selected);\n    }\n\n    @FXML\n    private void handleDeleteProduct() {\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\n        if (selected == null) {\n            showAlert(\"Vui lòng chọn sản phẩm cần xóa\", Alert.AlertType.WARNING);\n            return;\n        }\n\n        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);\n        confirm.setTitle(\"Xác nhận xóa\");\n        confirm.setHeaderText(\"Xóa sản phẩm khỏi đơn hàng?\");\n        confirm.setContentText(\"Bạn có chắc chắn muốn xóa sản phẩm này?\");\n\n        Optional<ButtonType> result = confirm.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            detailsList.remove(selected);\n            updateTotalAmount();\n        }\n    }\n\n    private void showAddProductDialog() {\n        Stage dialog = new Stage();\n        dialog.initModality(Modality.APPLICATION_MODAL);\n        dialog.setTitle(\"Thêm sản phẩm vào đơn hàng\");\n\n        VBox vbox = new VBox(15);\n        vbox.setPadding(new Insets(20));\n        vbox.setAlignment(Pos.CENTER);\n\n        // ComboBox chọn sản phẩm\n        Label lblProduct = new Label(\"Chọn sản phẩm:\");\n        ComboBox<Product> cbProducts = new ComboBox<>();\n\n        try {\n            List<Product> products = productDAO.getAllProducts();\n            cbProducts.setItems(FXCollections.observableArrayList(products));\n            cbProducts.setConverter(new javafx.util.StringConverter<Product>() {\n                @Override\n                public String toString(Product product) {\n                    return product != null ? product.getNameProducts() + \" - \" + currencyFormat.format(product.getPrice()) : \"\";\n                }\n                @Override\n                public Product fromString(String string) {\n                    return null;\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        // ComboBox chọn size\n        Label lblSize = new Label(\"Chọn size:\");\n        ComboBox<String> cbSize = new ComboBox<>();\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\n        cbSize.setValue(\"M\");\n\n        // Spinner số lượng\n        Label lblQuantity = new Label(\"Số lượng:\");\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, 1);\n        spinQuantity.setEditable(true);\n\n        // Buttons\n        HBox buttonBox = new HBox(10);\n        buttonBox.setAlignment(Pos.CENTER);\n\n        Button btnAdd = new Button(\"Thêm\");\n        btnAdd.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\n        btnAdd.setOnAction(e -> {\n            Product selectedProduct = cbProducts.getValue();\n            if (selectedProduct == null) {\n                showAlert(\"Vui lòng chọn sản phẩm\", Alert.AlertType.WARNING);\n                return;\n            }\n\n            OrderDetail newDetail = new OrderDetail();\n            newDetail.setProductId(selectedProduct.getId());\n            newDetail.setProductName(selectedProduct.getNameProducts());\n            newDetail.setSize(cbSize.getValue());\n            newDetail.setQuantity(spinQuantity.getValue());\n            newDetail.setUnitPrice(selectedProduct.getPrice());\n\n            // Kiểm tra xem sản phẩm đã tồn tại chưa\n            OrderDetail existing = detailsList.stream()\n                    .filter(d -> d.getProductId() == newDetail.getProductId() &&\n                            d.getSize().equals(newDetail.getSize()))\n                    .findFirst()\n                    .orElse(null);\n\n            if (existing != null) {\n                existing.setQuantity(existing.getQuantity() + newDetail.getQuantity());\n                orderDetailsTable.refresh();\n            } else {\n                detailsList.add(newDetail);\n            }\n\n            updateTotalAmount();\n            dialog.close();\n        });\n\n        Button btnCancel = new Button(\"Hủy\");\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\n        btnCancel.setOnAction(e -> dialog.close());\n\n        buttonBox.getChildren().addAll(btnAdd, btnCancel);\n\n        vbox.getChildren().addAll(\n                lblProduct, cbProducts,\n                lblSize, cbSize,\n                lblQuantity, spinQuantity,\n                buttonBox\n        );\n\n        Scene scene = new Scene(vbox, 400, 300);\n        dialog.setScene(scene);\n        dialog.showAndWait();\n    }\n\n    private void showEditProductDialog(OrderDetail detail) {\n        Stage dialog = new Stage();\n        dialog.initModality(Modality.APPLICATION_MODAL);\n        dialog.setTitle(\"Sửa sản phẩm\");\n\n        VBox vbox = new VBox(15);\n        vbox.setPadding(new Insets(20));\n        vbox.setAlignment(Pos.CENTER);\n\n        // Hiển thị tên sản phẩm\n        Label lblProduct = new Label(\"Sản phẩm: \" + detail.getProductName());\n        lblProduct.setStyle(\"-fx-font-weight: bold;\");\n\n        // ComboBox size\n        Label lblSize = new Label(\"Size:\");\n        ComboBox<String> cbSize = new ComboBox<>();\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\n        cbSize.setValue(detail.getSize());\n\n        // Spinner số lượng\n        Label lblQuantity = new Label(\"Số lượng:\");\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, detail.getQuantity());\n        spinQuantity.setEditable(true);\n\n        // Buttons\n        HBox buttonBox = new HBox(10);\n        buttonBox.setAlignment(Pos.CENTER);\n\n        Button btnSave = new Button(\"Lưu\");\n        btnSave.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\n        btnSave.setOnAction(e -> {\n            detail.setSize(cbSize.getValue());\n            detail.setQuantity(spinQuantity.getValue());\n            orderDetailsTable.refresh();\n            updateTotalAmount();\n            dialog.close();\n        });\n\n        Button btnCancel = new Button(\"Hủy\");\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\n        btnCancel.setOnAction(e -> dialog.close());\n\n        buttonBox.getChildren().addAll(btnSave, btnCancel);\n\n        vbox.getChildren().addAll(\n                lblProduct,\n                lblSize, cbSize,\n                lblQuantity, spinQuantity,\n                buttonBox\n        );\n\n        Scene scene = new Scene(vbox, 350, 250);\n        dialog.setScene(scene);\n        dialog.showAndWait();\n    }\n}",
                        "language": "java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\ProductDAO.java"
                    }
                ]
            },
            "createdAt": 1752084155554,
            "isInternal": false
        },
        {
            "id": "790bac82-961c-4a66-9ea7-df6b219f20b6",
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "gen ra lại cho đển @FXML private TableColumn<OrderDetail, String> productNameColumn; được hiện thị đi ạ"
                }
            ],
            "context": {
                "currentFile": {
                    "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                    "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "package com.coffeeshop.coffeeshop.controller;\r\n\r\nimport com.coffeeshop.coffeeshop.dao.OrderDao;\r\nimport com.coffeeshop.coffeeshop.dao.ProductDAO;\r\nimport com.coffeeshop.coffeeshop.model.Order;\r\nimport com.coffeeshop.coffeeshop.model.OrderDetail;\r\nimport com.coffeeshop.coffeeshop.model.Product;\r\nimport com.coffeeshop.coffeeshop.util.DBConnection;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.beans.property.SimpleIntegerProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Callback;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.text.DecimalFormat;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class OrderUpdateController {\r\n\r\n    @FXML private TextField searchField;\r\n    @FXML private ComboBox<String> filterStatusComboBox;\r\n    @FXML private TableView<Order> ordersTable;\r\n    @FXML private TableColumn<Order, Integer> orderIdColumn;\r\n    @FXML private TableColumn<Order, Integer> staffIdColumn;\r\n    @FXML private TableColumn<Order, String> orderDateColumn;\r\n    @FXML private TableColumn<Order, String> totalAmountColumn;\r\n    @FXML private TableColumn<Order, String> statusColumn;\r\n    @FXML private TableColumn<Order, String> noteColumn;\r\n    @FXML private TableColumn<Order, Void> actionColumn;\r\n\r\n    @FXML private TitledPane detailPane;\r\n    @FXML private TextField editOrderIdField;\r\n    @FXML private TextField editStaffIdField;\r\n    @FXML private DatePicker editOrderDatePicker;\r\n    @FXML private ComboBox<String> editStatusComboBox;\r\n    @FXML private TextField editNoteField;\r\n\r\n    @FXML private TableView<OrderDetail> orderDetailsTable;\r\n    @FXML private TableColumn<OrderDetail, Integer> productIdColumn;\r\n    @FXML private TableColumn<OrderDetail, String> productNameColumn;\r\n    @FXML private TableColumn<OrderDetail, String> sizeColumn;\r\n    @FXML private TableColumn<OrderDetail, Integer> quantityColumn;\r\n    @FXML private TableColumn<OrderDetail, String> unitPriceColumn;\r\n    @FXML private TableColumn<OrderDetail, String> subtotalColumn;\r\n    @FXML private Label totalAmountLabel;\r\n\r\n    private OrderDao orderDao;\r\n    private ProductDAO productDAO;\r\n    private ObservableList<Order> ordersList = FXCollections.observableArrayList();\r\n    private ObservableList<Order> filteredOrdersList = FXCollections.observableArrayList();\r\n    private ObservableList<OrderDetail> detailsList = FXCollections.observableArrayList();\r\n    private Order currentEditingOrder;\r\n    private DecimalFormat currencyFormat = new DecimalFormat(\"#,###.## VND\");\r\n    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\r\n    private Connection connection;\r\n\r\n    public void setConnection(Connection connection) {\r\n        System.out.println(\"=== DEBUG: setConnection() được gọi ===\");\r\n        this.connection = connection;\r\n        System.out.println(\"DEBUG: Connection đã được set: \" + (connection != null ? \"Thành công\" : \"Null\"));\r\n\r\n        this.orderDao = new OrderDao(connection);\r\n        System.out.println(\"DEBUG: OrderDao đã được khởi tạo\");\r\n\r\n        loadOrders();\r\n    }\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        System.out.println(\"=== DEBUG: initialize() bắt đầu ===\");\r\n\r\n        // Khởi tạo ComboBox\r\n        ObservableList<String> statusOptions = FXCollections.observableArrayList(\r\n                \"Tất cả\", \"Pending\", \"Completed\", \"Cancelled\"\r\n        );\r\n        filterStatusComboBox.setItems(statusOptions);\r\n        filterStatusComboBox.setValue(\"Tất cả\");\r\n\r\n        editStatusComboBox.setItems(FXCollections.observableArrayList(\r\n                \"Pending\", \"Completed\", \"Cancelled\"\r\n        ));\r\n\r\n        // Cấu hình bảng đơn hàng\r\n        setupOrdersTable();\r\n\r\n        // Cấu hình bảng chi tiết đơn hàng\r\n        setupOrderDetailsTable();\r\n\r\n        // THÊM DEBUG: Kiểm tra connection\r\n        System.out.println(\"DEBUG: Connection trong initialize(): \" + (connection != null ? \"Có\" : \"NULL\"));\r\n        System.out.println(\"DEBUG: OrderDao trong initialize(): \" + (orderDao != null ? \"Có\" : \"NULL\"));\r\n\r\n        // Nếu connection chưa có thì thử tạo connection tự động\r\n        if (connection == null) {\r\n            System.out.println(\"DEBUG: Connection chưa có, thử tạo connection tự động\");\r\n            try {\r\n                System.out.println(\"DEBUG: Đang gọi DBConnection.getConnection()...\");\r\n                Connection conn = DBConnection.getConnection();\r\n                System.out.println(\"DEBUG: DBConnection.getConnection() returned: \" + conn);\r\n\r\n                if (conn != null) {\r\n                    System.out.println(\"DEBUG: Connection thành công, khởi tạo OrderDao...\");\r\n                    this.connection = conn;\r\n                    this.orderDao = new OrderDao(conn);\r\n                    this.productDAO = new ProductDAO(conn);\r\n                    System.out.println(\"DEBUG: Đã tạo connection, OrderDao và ProductDAO tự động thành công\");\r\n                    loadOrders();\r\n                } else {\r\n                    System.out.println(\"DEBUG: Connection trả về null\");\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"DEBUG: Exception khi tạo connection: \" + e.getClass().getName());\r\n                System.out.println(\"DEBUG: Exception message: \" + e.getMessage());\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        System.out.println(\"DEBUG: initialize() hoàn thành\");\r\n    }\r\n\r\n    private void setupOrdersTable() {\r\n        orderIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\r\n        staffIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"staffId\"));\r\n\r\n        orderDateColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(cellData.getValue().getOrderDate().format(dateTimeFormatter))\r\n        );\r\n\r\n        totalAmountColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getTotalAmount()))\r\n        );\r\n\r\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\r\n        noteColumn.setCellValueFactory(new PropertyValueFactory<>(\"note\"));\r\n\r\n        // Thêm nút hành động\r\n        setupActionColumn();\r\n\r\n        // Xử lý double click để xem chi tiết\r\n        ordersTable.setRowFactory(tv -> {\r\n            TableRow<Order> row = new TableRow<>();\r\n            row.setOnMouseClicked(event -> {\r\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\r\n                    loadOrderDetails(row.getItem());\r\n                }\r\n            });\r\n            return row;\r\n        });\r\n    }\r\n\r\n    private void setupActionColumn() {\r\n        Callback<TableColumn<Order, Void>, TableCell<Order, Void>> cellFactory = new Callback<>() {\r\n            @Override\r\n            public TableCell<Order, Void> call(final TableColumn<Order, Void> param) {\r\n                final TableCell<Order, Void> cell = new TableCell<>() {\r\n                    private final Button editBtn = new Button(\"Sửa\");\r\n                    private final Button deleteBtn = new Button(\"Xóa\");\r\n\r\n                    {\r\n                        editBtn.setStyle(\"-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-cursor: hand;\");\r\n                        deleteBtn.setStyle(\"-fx-background-color: #dc3545; -fx-text-fill: white; -fx-cursor: hand;\");\r\n\r\n                        editBtn.setOnAction(event -> {\r\n                            Order order = getTableView().getItems().get(getIndex());\r\n                            loadOrderDetails(order);\r\n                        });\r\n\r\n                        deleteBtn.setOnAction(event -> {\r\n                            Order order = getTableView().getItems().get(getIndex());\r\n                            handleDeleteOrder(order);\r\n                        });\r\n                    }\r\n\r\n                    @Override\r\n                    protected void updateItem(Void item, boolean empty) {\r\n                        super.updateItem(item, empty);\r\n                        if (empty) {\r\n                            setGraphic(null);\r\n                        } else {\r\n                            HBox hbox = new HBox(10);\r\n                            hbox.getChildren().addAll(editBtn, deleteBtn);\r\n                            setGraphic(hbox);\r\n                        }\r\n                    }\r\n                };\r\n                return cell;\r\n            }\r\n        };\r\n\r\n        actionColumn.setCellFactory(cellFactory);\r\n    }\r\n\r\n    private void setupOrderDetailsTable() {\r\n        productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\r\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\r\n        quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\r\n\r\n        unitPriceColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice()))\r\n        );\r\n\r\n        subtotalColumn.setCellValueFactory(cellData -> {\r\n            OrderDetail detail = cellData.getValue();\r\n            double subtotal = detail.getQuantity() * detail.getUnitPrice();\r\n            return new SimpleStringProperty(currencyFormat.format(subtotal));\r\n        });\r\n    }\r\n\r\n    private void loadOrders() {\r\n        System.out.println(\"=== DEBUG: loadOrders() bắt đầu ===\");\r\n\r\n        if (orderDao == null) {\r\n            System.out.println(\"DEBUG: orderDao is null, không thể load orders\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            List<Order> orders = orderDao.getAllOrders();\r\n            System.out.println(\"DEBUG: Số lượng orders lấy được: \" + (orders != null ? orders.size() : 0));\r\n\r\n            if (orders != null) {\r\n                ordersList.setAll(orders);\r\n                filteredOrdersList.setAll(orders);\r\n                ordersTable.setItems(filteredOrdersList);\r\n                System.out.println(\"DEBUG: Đã load \" + orders.size() + \" orders vào table\");\r\n            } else {\r\n                System.out.println(\"DEBUG: getAllOrders() trả về null\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"DEBUG: Lỗi trong loadOrders(): \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"DEBUG: loadOrders() hoàn thành\");\r\n    }\r\n\r\n    @FXML\r\n    private void handleSearch() {\r\n        System.out.println(\"=== DEBUG: handleSearch() được gọi ===\");\r\n\r\n        if (ordersList == null || ordersList.isEmpty()) {\r\n            System.out.println(\"DEBUG: ordersList is null or empty\");\r\n            showAlert(\"Không có dữ liệu để tìm kiếm\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        String searchText = searchField.getText().toLowerCase();\r\n        String selectedStatus = filterStatusComboBox.getValue();\r\n\r\n        System.out.println(\"DEBUG: Search text: \" + searchText + \", Status: \" + selectedStatus);\r\n\r\n        List<Order> filtered = ordersList.stream()\r\n                .filter(order -> {\r\n                    boolean matchesSearch = searchText.isEmpty() ||\r\n                            String.valueOf(order.getOrderId()).contains(searchText) ||\r\n                            String.valueOf(order.getStaffId()).contains(searchText) ||\r\n                            (order.getNote() != null && order.getNote().toLowerCase().contains(searchText));\r\n\r\n                    boolean matchesStatus = \"Tất cả\".equals(selectedStatus) ||\r\n                            order.getStatus().equals(selectedStatus);\r\n\r\n                    return matchesSearch && matchesStatus;\r\n                })\r\n                .collect(Collectors.toList());\r\n\r\n        System.out.println(\"DEBUG: Số orders sau khi filter: \" + filtered.size());\r\n        filteredOrdersList.setAll(filtered);\r\n    }\r\n\r\n    @FXML\r\n    private void handleRefresh() {\r\n        searchField.clear();\r\n        filterStatusComboBox.setValue(\"Tất cả\");\r\n        loadOrders();\r\n        detailPane.setExpanded(false);\r\n    }\r\n\r\n    private void loadOrderDetails(Order order) {\r\n        currentEditingOrder = order;\r\n\r\n        // Load thông tin order\r\n        editOrderIdField.setText(String.valueOf(order.getOrderId()));\r\n        editStaffIdField.setText(String.valueOf(order.getStaffId()));\r\n        editOrderDatePicker.setValue(order.getOrderDate().toLocalDate());\r\n        editStatusComboBox.setValue(order.getStatus());\r\n        editNoteField.setText(order.getNote());\r\n\r\n        // Load chi tiết order\r\n        List<OrderDetail> details = orderDao.getOrderDetails(order.getOrderId());\r\n\r\n        // Set tên sản phẩm cho mỗi OrderDetail\r\n        if (productDAO != null) {\r\n            for (OrderDetail detail : details) {\r\n                try {\r\n                    // Lấy thông tin sản phẩm từ database\r\n                    String productName = getProductName(detail.getProductId());\r\n                    if (productName != null) {\r\n                        detail.setProductName(productName);\r\n                    } else {\r\n                        detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\r\n                    }\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\r\n                    detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\r\n                }\r\n            }\r\n        }\r\n\r\n        detailsList.clear();\r\n        detailsList.addAll(details);\r\n        orderDetailsTable.setItems(detailsList);\r\n\r\n        // Tính tổng tiền\r\n        updateTotalAmount();\r\n\r\n        // Mở panel chi tiết\r\n        detailPane.setExpanded(true);\r\n    }\r\n\r\n    private void updateTotalAmount() {\r\n        double total = detailsList.stream()\r\n                .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\r\n                .sum();\r\n        totalAmountLabel.setText(currencyFormat.format(total));\r\n    }\r\n\r\n    @FXML\r\n    private void handleUpdateOrder() {\r\n        if (currentEditingOrder == null) {\r\n            showAlert(\"Vui lòng chọn đơn hàng cần cập nhật\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Lấy thông tin mới\r\n            int staffId = Integer.parseInt(editStaffIdField.getText());\r\n            LocalDateTime orderDate = LocalDateTime.of(editOrderDatePicker.getValue(), LocalTime.now());\r\n            String status = editStatusComboBox.getValue();\r\n            String note = editNoteField.getText();\r\n\r\n            // Tạo order mới với thông tin cập nhật\r\n            Order updatedOrder = new Order(\r\n                    currentEditingOrder.getOrderId(),\r\n                    staffId,\r\n                    orderDate,\r\n                    0, // Sẽ tính lại\r\n                    status,\r\n                    note\r\n            );\r\n\r\n            // Tính tổng tiền\r\n            double total = detailsList.stream()\r\n                    .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\r\n                    .sum();\r\n            updatedOrder.setTotalAmount(total);\r\n\r\n            // Cập nhật vào database\r\n            boolean success = orderDao.updateOrder(updatedOrder, detailsList);\r\n\r\n            if (success) {\r\n                showAlert(\"Cập nhật đơn hàng thành công!\", Alert.AlertType.INFORMATION);\r\n                loadOrders(); // Reload danh sách\r\n                detailPane.setExpanded(false);\r\n            } else {\r\n                showAlert(\"Cập nhật thất bại. Vui lòng thử lại.\", Alert.AlertType.ERROR);\r\n            }\r\n\r\n        } catch (NumberFormatException e) {\r\n            showAlert(\"Vui lòng nhập đúng định dạng số cho mã nhân viên\", Alert.AlertType.ERROR);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Lỗi: \" + e.getMessage(), Alert.AlertType.ERROR);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleCancelEdit() {\r\n        detailPane.setExpanded(false);\r\n        currentEditingOrder = null;\r\n        clearEditForm();\r\n    }\r\n\r\n    private void handleDeleteOrder(Order order) {\r\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n        alert.setTitle(\"Xác nhận xóa\");\r\n        alert.setHeaderText(\"Bạn có chắc chắn muốn xóa đơn hàng #\" + order.getOrderId() + \"?\");\r\n        alert.setContentText(\"Hành động này không thể hoàn tác.\");\r\n\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            // Ở đây bạn có thể thêm phương thức deleteOrder trong OrderDao\r\n            // Tạm thời có thể cập nhật status thành \"Cancelled\"\r\n            boolean success = orderDao.updateOrderStatus(order.getOrderId(), \"Cancelled\");\r\n            if (success) {\r\n                showAlert(\"Đã hủy đơn hàng thành công!\", Alert.AlertType.INFORMATION);\r\n                loadOrders();\r\n            } else {\r\n                showAlert(\"Không thể hủy đơn hàng.\", Alert.AlertType.ERROR);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void clearEditForm() {\r\n        editOrderIdField.clear();\r\n        editStaffIdField.clear();\r\n        editOrderDatePicker.setValue(null);\r\n        editStatusComboBox.setValue(null);\r\n        editNoteField.clear();\r\n        detailsList.clear();\r\n        totalAmountLabel.setText(\"0 VND\");\r\n    }\r\n\r\n    private void showAlert(String message, Alert.AlertType type) {\r\n        Alert alert = new Alert(type);\r\n        alert.setTitle(\"Thông báo\");\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @FXML\r\n    private void handleAddProduct() {\r\n        if (currentEditingOrder == null) {\r\n            showAlert(\"Vui lòng chọn đơn hàng trước khi thêm sản phẩm\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n        showAddProductDialog();\r\n    }\r\n\r\n    @FXML\r\n    private void handleEditProduct() {\r\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\r\n        if (selected == null) {\r\n            showAlert(\"Vui lòng chọn sản phẩm cần sửa\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n        showEditProductDialog(selected);\r\n    }\r\n\r\n    @FXML\r\n    private void handleDeleteProduct() {\r\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\r\n        if (selected == null) {\r\n            showAlert(\"Vui lòng chọn sản phẩm cần xóa\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);\r\n        confirm.setTitle(\"Xác nhận xóa\");\r\n        confirm.setHeaderText(\"Xóa sản phẩm khỏi đơn hàng?\");\r\n        confirm.setContentText(\"Bạn có chắc chắn muốn xóa sản phẩm này?\");\r\n\r\n        Optional<ButtonType> result = confirm.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            detailsList.remove(selected);\r\n            updateTotalAmount();\r\n        }\r\n    }\r\n\r\n    private void showAddProductDialog() {\r\n        Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.setTitle(\"Thêm sản phẩm vào đơn hàng\");\r\n\r\n        VBox vbox = new VBox(15);\r\n        vbox.setPadding(new Insets(20));\r\n        vbox.setAlignment(Pos.CENTER);\r\n\r\n        // ComboBox chọn sản phẩm\r\n        Label lblProduct = new Label(\"Chọn sản phẩm:\");\r\n        ComboBox<Product> cbProducts = new ComboBox<>();\r\n\r\n        try {\r\n            List<Product> products = getSimpleProductList();\r\n            cbProducts.setItems(FXCollections.observableArrayList(products));\r\n            cbProducts.setConverter(new javafx.util.StringConverter<Product>() {\r\n                @Override\r\n                public String toString(Product product) {\r\n                    return product != null ? product.getNameProducts() + \" - \" + currencyFormat.format(product.getPrice()) : \"\";\r\n                }\r\n                @Override\r\n                public Product fromString(String string) {\r\n                    return null;\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Lỗi khi tải danh sách sản phẩm\", Alert.AlertType.ERROR);\r\n        }\r\n\r\n        // ComboBox chọn size\r\n        Label lblSize = new Label(\"Chọn size:\");\r\n        ComboBox<String> cbSize = new ComboBox<>();\r\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\r\n        cbSize.setValue(\"M\");\r\n\r\n        // Spinner số lượng\r\n        Label lblQuantity = new Label(\"Số lượng:\");\r\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, 1);\r\n        spinQuantity.setEditable(true);\r\n\r\n        // Buttons\r\n        HBox buttonBox = new HBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        Button btnAdd = new Button(\"Thêm\");\r\n        btnAdd.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\r\n        btnAdd.setOnAction(e -> {\r\n            Product selectedProduct = cbProducts.getValue();\r\n            if (selectedProduct == null) {\r\n                showAlert(\"Vui lòng chọn sản phẩm\", Alert.AlertType.WARNING);\r\n                return;\r\n            }\r\n\r\n            OrderDetail newDetail = new OrderDetail();\r\n            newDetail.setProductId(selectedProduct.getId());\r\n            newDetail.setProductName(selectedProduct.getNameProducts());\r\n            newDetail.setSize(cbSize.getValue());\r\n            newDetail.setQuantity(spinQuantity.getValue());\r\n            newDetail.setUnitPrice(selectedProduct.getPrice());\r\n\r\n            // Kiểm tra xem sản phẩm đã tồn tại chưa\r\n            OrderDetail existing = detailsList.stream()\r\n                    .filter(d -> d.getProductId() == newDetail.getProductId() &&\r\n                            d.getSize().equals(newDetail.getSize()))\r\n                    .findFirst()\r\n                    .orElse(null);\r\n\r\n            if (existing != null) {\r\n                existing.setQuantity(existing.getQuantity() + newDetail.getQuantity());\r\n                orderDetailsTable.refresh();\r\n            } else {\r\n                detailsList.add(newDetail);\r\n            }\r\n\r\n            updateTotalAmount();\r\n            dialog.close();\r\n        });\r\n\r\n        Button btnCancel = new Button(\"Hủy\");\r\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\r\n        btnCancel.setOnAction(e -> dialog.close());\r\n\r\n        buttonBox.getChildren().addAll(btnAdd, btnCancel);\r\n\r\n        vbox.getChildren().addAll(\r\n                lblProduct, cbProducts,\r\n                lblSize, cbSize,\r\n                lblQuantity, spinQuantity,\r\n                buttonBox\r\n        );\r\n\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        dialog.setScene(scene);\r\n        dialog.showAndWait();\r\n    }\r\n\r\n    private void showEditProductDialog(OrderDetail detail) {\r\n        Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.setTitle(\"Sửa sản phẩm\");\r\n\r\n        VBox vbox = new VBox(15);\r\n        vbox.setPadding(new Insets(20));\r\n        vbox.setAlignment(Pos.CENTER);\r\n\r\n        // Hiển thị tên sản phẩm\r\n        Label lblProduct = new Label(\"Sản phẩm: \" + detail.getProductName());\r\n        lblProduct.setStyle(\"-fx-font-weight: bold;\");\r\n\r\n        // ComboBox size\r\n        Label lblSize = new Label(\"Size:\");\r\n        ComboBox<String> cbSize = new ComboBox<>();\r\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\r\n        cbSize.setValue(detail.getSize());\r\n\r\n        // Spinner số lượng\r\n        Label lblQuantity = new Label(\"Số lượng:\");\r\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, detail.getQuantity());\r\n        spinQuantity.setEditable(true);\r\n\r\n        // Buttons\r\n        HBox buttonBox = new HBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        Button btnSave = new Button(\"Lưu\");\r\n        btnSave.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\r\n        btnSave.setOnAction(e -> {\r\n            detail.setSize(cbSize.getValue());\r\n            detail.setQuantity(spinQuantity.getValue());\r\n            orderDetailsTable.refresh();\r\n            updateTotalAmount();\r\n            dialog.close();\r\n        });\r\n\r\n        Button btnCancel = new Button(\"Hủy\");\r\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\r\n        btnCancel.setOnAction(e -> dialog.close());\r\n\r\n        buttonBox.getChildren().addAll(btnSave, btnCancel);\r\n\r\n        vbox.getChildren().addAll(\r\n                lblProduct,\r\n                lblSize, cbSize,\r\n                lblQuantity, spinQuantity,\r\n                buttonBox\r\n        );\r\n\r\n        Scene scene = new Scene(vbox, 350, 250);\r\n        dialog.setScene(scene);\r\n        dialog.showAndWait();\r\n    }\r\n\r\n    // Phương thức helper để lấy tên sản phẩm\r\n    private String getProductName(int productId) {\r\n        String sql = \"SELECT NameProducts FROM Products WHERE ID = ?\";\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setInt(1, productId);\r\n            ResultSet rs = stmt.executeQuery();\r\n            if (rs.next()) {\r\n                return rs.getString(\"NameProducts\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Phương thức helper để lấy danh sách sản phẩm đơn giản\r\n    private List<Product> getSimpleProductList() {\r\n        List<Product> products = new ArrayList<>();\r\n        String sql = \"SELECT ID, NameProducts, Price FROM Products\";\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql);\r\n             ResultSet rs = stmt.executeQuery()) {\r\n\r\n            while (rs.next()) {\r\n                Product p = new Product();\r\n                p.setId(rs.getInt(\"ID\"));\r\n                p.setNameProducts(rs.getString(\"NameProducts\"));\r\n                p.setPrice(rs.getDouble(\"Price\"));\r\n                products.add(p);\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"Lỗi khi lấy danh sách sản phẩm: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n        return products;\r\n    }\r\n}"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/model/OrderDetail.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/dao/OrderDao.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\OrderDao.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/LoginController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\LoginController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/CreateUserController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CreateUserController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/MainViewController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\MainViewController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/HomeUserController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\HomeUserController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/ProductController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/CategoriesController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\resources\\views\\products\\Products.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\products\\Products.fxml",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderView.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\Order\\OrderView.fxml",
                        "sources": []
                    },
                    {
                        "path": "pom.xml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\pom.xml",
                        "sources": []
                    },
                    {
                        "path": ".gitignore",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": ".mvn\\wrapper\\maven-wrapper.properties",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\.mvn\\wrapper\\maven-wrapper.properties",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "sources": []
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "src/main/resources/views/Order/OrderUpdate.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\Order\\OrderUpdate.fxml",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java"
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderUpdate.fxml",
                        "fsPath": "src\\main\\resources\\views\\Order\\OrderUpdate.fxml"
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderView.fxml",
                        "fsPath": "src\\main\\resources\\views\\Order\\OrderView.fxml"
                    },
                    {
                        "path": "src\\main\\resources\\views\\products\\Products.fxml",
                        "fsPath": "src\\main\\resources\\views\\products\\Products.fxml"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "package com.coffeeshop.coffeeshop.controller;\r\n\r\nimport com.coffeeshop.coffeeshop.dao.OrderDao;\r\nimport com.coffeeshop.coffeeshop.dao.ProductDAO;\r\nimport com.coffeeshop.coffeeshop.model.Order;\r\nimport com.coffeeshop.coffeeshop.model.OrderDetail;\r\nimport com.coffeeshop.coffeeshop.model.Product;\r\nimport com.coffeeshop.coffeeshop.util.DBConnection;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.beans.property.SimpleIntegerProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Callback;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.text.DecimalFormat;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class OrderUpdateController {\r\n\r\n    @FXML private TextField searchField;\r\n    @FXML private ComboBox<String> filterStatusComboBox;\r\n    @FXML private TableView<Order> ordersTable;\r\n    @FXML private TableColumn<Order, Integer> orderIdColumn;\r\n    @FXML private TableColumn<Order, Integer> staffIdColumn;\r\n    @FXML private TableColumn<Order, String> orderDateColumn;\r\n    @FXML private TableColumn<Order, String> totalAmountColumn;\r\n    @FXML private TableColumn<Order, String> statusColumn;\r\n    @FXML private TableColumn<Order, String> noteColumn;\r\n    @FXML private TableColumn<Order, Void> actionColumn;\r\n\r\n    @FXML private TitledPane detailPane;\r\n    @FXML private TextField editOrderIdField;\r\n    @FXML private TextField editStaffIdField;\r\n    @FXML private DatePicker editOrderDatePicker;\r\n    @FXML private ComboBox<String> editStatusComboBox;\r\n    @FXML private TextField editNoteField;\r\n\r\n    @FXML private TableView<OrderDetail> orderDetailsTable;\r\n    @FXML private TableColumn<OrderDetail, Integer> productIdColumn;\r\n    @FXML private TableColumn<OrderDetail, String> productNameColumn;\r\n    @FXML private TableColumn<OrderDetail, String> sizeColumn;\r\n    @FXML private TableColumn<OrderDetail, Integer> quantityColumn;\r\n    @FXML private TableColumn<OrderDetail, String> unitPriceColumn;\r\n    @FXML private TableColumn<OrderDetail, String> subtotalColumn;\r\n    @FXML private Label totalAmountLabel;\r\n\r\n    private OrderDao orderDao;\r\n    private ProductDAO productDAO;\r\n    private ObservableList<Order> ordersList = FXCollections.observableArrayList();\r\n    private ObservableList<Order> filteredOrdersList = FXCollections.observableArrayList();\r\n    private ObservableList<OrderDetail> detailsList = FXCollections.observableArrayList();\r\n    private Order currentEditingOrder;\r\n    private DecimalFormat currencyFormat = new DecimalFormat(\"#,###.## VND\");\r\n    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\r\n    private Connection connection;\r\n\r\n    public void setConnection(Connection connection) {\r\n        System.out.println(\"=== DEBUG: setConnection() được gọi ===\");\r\n        this.connection = connection;\r\n        System.out.println(\"DEBUG: Connection đã được set: \" + (connection != null ? \"Thành công\" : \"Null\"));\r\n\r\n        this.orderDao = new OrderDao(connection);\r\n        System.out.println(\"DEBUG: OrderDao đã được khởi tạo\");\r\n\r\n        loadOrders();\r\n    }\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        System.out.println(\"=== DEBUG: initialize() bắt đầu ===\");\r\n\r\n        // Khởi tạo ComboBox\r\n        ObservableList<String> statusOptions = FXCollections.observableArrayList(\r\n                \"Tất cả\", \"Pending\", \"Completed\", \"Cancelled\"\r\n        );\r\n        filterStatusComboBox.setItems(statusOptions);\r\n        filterStatusComboBox.setValue(\"Tất cả\");\r\n\r\n        editStatusComboBox.setItems(FXCollections.observableArrayList(\r\n                \"Pending\", \"Completed\", \"Cancelled\"\r\n        ));\r\n\r\n        // Cấu hình bảng đơn hàng\r\n        setupOrdersTable();\r\n\r\n        // Cấu hình bảng chi tiết đơn hàng\r\n        setupOrderDetailsTable();\r\n\r\n        // THÊM DEBUG: Kiểm tra connection\r\n        System.out.println(\"DEBUG: Connection trong initialize(): \" + (connection != null ? \"Có\" : \"NULL\"));\r\n        System.out.println(\"DEBUG: OrderDao trong initialize(): \" + (orderDao != null ? \"Có\" : \"NULL\"));\r\n\r\n        // Nếu connection chưa có thì thử tạo connection tự động\r\n        if (connection == null) {\r\n            System.out.println(\"DEBUG: Connection chưa có, thử tạo connection tự động\");\r\n            try {\r\n                System.out.println(\"DEBUG: Đang gọi DBConnection.getConnection()...\");\r\n                Connection conn = DBConnection.getConnection();\r\n                System.out.println(\"DEBUG: DBConnection.getConnection() returned: \" + conn);\r\n\r\n                if (conn != null) {\r\n                    System.out.println(\"DEBUG: Connection thành công, khởi tạo OrderDao...\");\r\n                    this.connection = conn;\r\n                    this.orderDao = new OrderDao(conn);\r\n                    this.productDAO = new ProductDAO(conn);\r\n                    System.out.println(\"DEBUG: Đã tạo connection, OrderDao và ProductDAO tự động thành công\");\r\n                    loadOrders();\r\n                } else {\r\n                    System.out.println(\"DEBUG: Connection trả về null\");\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"DEBUG: Exception khi tạo connection: \" + e.getClass().getName());\r\n                System.out.println(\"DEBUG: Exception message: \" + e.getMessage());\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        System.out.println(\"DEBUG: initialize() hoàn thành\");\r\n    }\r\n\r\n    private void setupOrdersTable() {\r\n        orderIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\r\n        staffIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"staffId\"));\r\n\r\n        orderDateColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(cellData.getValue().getOrderDate().format(dateTimeFormatter))\r\n        );\r\n\r\n        totalAmountColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getTotalAmount()))\r\n        );\r\n\r\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\r\n        noteColumn.setCellValueFactory(new PropertyValueFactory<>(\"note\"));\r\n\r\n        // Thêm nút hành động\r\n        setupActionColumn();\r\n\r\n        // Xử lý double click để xem chi tiết\r\n        ordersTable.setRowFactory(tv -> {\r\n            TableRow<Order> row = new TableRow<>();\r\n            row.setOnMouseClicked(event -> {\r\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\r\n                    loadOrderDetails(row.getItem());\r\n                }\r\n            });\r\n            return row;\r\n        });\r\n    }\r\n\r\n    private void setupActionColumn() {\r\n        Callback<TableColumn<Order, Void>, TableCell<Order, Void>> cellFactory = new Callback<>() {\r\n            @Override\r\n            public TableCell<Order, Void> call(final TableColumn<Order, Void> param) {\r\n                final TableCell<Order, Void> cell = new TableCell<>() {\r\n                    private final Button editBtn = new Button(\"Sửa\");\r\n                    private final Button deleteBtn = new Button(\"Xóa\");\r\n\r\n                    {\r\n                        editBtn.setStyle(\"-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-cursor: hand;\");\r\n                        deleteBtn.setStyle(\"-fx-background-color: #dc3545; -fx-text-fill: white; -fx-cursor: hand;\");\r\n\r\n                        editBtn.setOnAction(event -> {\r\n                            Order order = getTableView().getItems().get(getIndex());\r\n                            loadOrderDetails(order);\r\n                        });\r\n\r\n                        deleteBtn.setOnAction(event -> {\r\n                            Order order = getTableView().getItems().get(getIndex());\r\n                            handleDeleteOrder(order);\r\n                        });\r\n                    }\r\n\r\n                    @Override\r\n                    protected void updateItem(Void item, boolean empty) {\r\n                        super.updateItem(item, empty);\r\n                        if (empty) {\r\n                            setGraphic(null);\r\n                        } else {\r\n                            HBox hbox = new HBox(10);\r\n                            hbox.getChildren().addAll(editBtn, deleteBtn);\r\n                            setGraphic(hbox);\r\n                        }\r\n                    }\r\n                };\r\n                return cell;\r\n            }\r\n        };\r\n\r\n        actionColumn.setCellFactory(cellFactory);\r\n    }\r\n\r\n    private void setupOrderDetailsTable() {\r\n        productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\r\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\r\n        quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\r\n\r\n        unitPriceColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice()))\r\n        );\r\n\r\n        subtotalColumn.setCellValueFactory(cellData -> {\r\n            OrderDetail detail = cellData.getValue();\r\n            double subtotal = detail.getQuantity() * detail.getUnitPrice();\r\n            return new SimpleStringProperty(currencyFormat.format(subtotal));\r\n        });\r\n    }\r\n\r\n    private void loadOrders() {\r\n        System.out.println(\"=== DEBUG: loadOrders() bắt đầu ===\");\r\n\r\n        if (orderDao == null) {\r\n            System.out.println(\"DEBUG: orderDao is null, không thể load orders\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            List<Order> orders = orderDao.getAllOrders();\r\n            System.out.println(\"DEBUG: Số lượng orders lấy được: \" + (orders != null ? orders.size() : 0));\r\n\r\n            if (orders != null) {\r\n                ordersList.setAll(orders);\r\n                filteredOrdersList.setAll(orders);\r\n                ordersTable.setItems(filteredOrdersList);\r\n                System.out.println(\"DEBUG: Đã load \" + orders.size() + \" orders vào table\");\r\n            } else {\r\n                System.out.println(\"DEBUG: getAllOrders() trả về null\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"DEBUG: Lỗi trong loadOrders(): \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"DEBUG: loadOrders() hoàn thành\");\r\n    }\r\n\r\n    @FXML\r\n    private void handleSearch() {\r\n        System.out.println(\"=== DEBUG: handleSearch() được gọi ===\");\r\n\r\n        if (ordersList == null || ordersList.isEmpty()) {\r\n            System.out.println(\"DEBUG: ordersList is null or empty\");\r\n            showAlert(\"Không có dữ liệu để tìm kiếm\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        String searchText = searchField.getText().toLowerCase();\r\n        String selectedStatus = filterStatusComboBox.getValue();\r\n\r\n        System.out.println(\"DEBUG: Search text: \" + searchText + \", Status: \" + selectedStatus);\r\n\r\n        List<Order> filtered = ordersList.stream()\r\n                .filter(order -> {\r\n                    boolean matchesSearch = searchText.isEmpty() ||\r\n                            String.valueOf(order.getOrderId()).contains(searchText) ||\r\n                            String.valueOf(order.getStaffId()).contains(searchText) ||\r\n                            (order.getNote() != null && order.getNote().toLowerCase().contains(searchText));\r\n\r\n                    boolean matchesStatus = \"Tất cả\".equals(selectedStatus) ||\r\n                            order.getStatus().equals(selectedStatus);\r\n\r\n                    return matchesSearch && matchesStatus;\r\n                })\r\n                .collect(Collectors.toList());\r\n\r\n        System.out.println(\"DEBUG: Số orders sau khi filter: \" + filtered.size());\r\n        filteredOrdersList.setAll(filtered);\r\n    }\r\n\r\n    @FXML\r\n    private void handleRefresh() {\r\n        searchField.clear();\r\n        filterStatusComboBox.setValue(\"Tất cả\");\r\n        loadOrders();\r\n        detailPane.setExpanded(false);\r\n    }\r\n\r\n    private void loadOrderDetails(Order order) {\r\n        currentEditingOrder = order;\r\n\r\n        // Load thông tin order\r\n        editOrderIdField.setText(String.valueOf(order.getOrderId()));\r\n        editStaffIdField.setText(String.valueOf(order.getStaffId()));\r\n        editOrderDatePicker.setValue(order.getOrderDate().toLocalDate());\r\n        editStatusComboBox.setValue(order.getStatus());\r\n        editNoteField.setText(order.getNote());\r\n\r\n        // Load chi tiết order\r\n        List<OrderDetail> details = orderDao.getOrderDetails(order.getOrderId());\r\n\r\n        // Set tên sản phẩm cho mỗi OrderDetail\r\n        if (productDAO != null) {\r\n            for (OrderDetail detail : details) {\r\n                try {\r\n                    // Lấy thông tin sản phẩm từ database\r\n                    String productName = getProductName(detail.getProductId());\r\n                    if (productName != null) {\r\n                        detail.setProductName(productName);\r\n                    } else {\r\n                        detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\r\n                    }\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\r\n                    detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\r\n                }\r\n            }\r\n        }\r\n\r\n        detailsList.clear();\r\n        detailsList.addAll(details);\r\n        orderDetailsTable.setItems(detailsList);\r\n\r\n        // Tính tổng tiền\r\n        updateTotalAmount();\r\n\r\n        // Mở panel chi tiết\r\n        detailPane.setExpanded(true);\r\n    }\r\n\r\n    private void updateTotalAmount() {\r\n        double total = detailsList.stream()\r\n                .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\r\n                .sum();\r\n        totalAmountLabel.setText(currencyFormat.format(total));\r\n    }\r\n\r\n    @FXML\r\n    private void handleUpdateOrder() {\r\n        if (currentEditingOrder == null) {\r\n            showAlert(\"Vui lòng chọn đơn hàng cần cập nhật\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Lấy thông tin mới\r\n            int staffId = Integer.parseInt(editStaffIdField.getText());\r\n            LocalDateTime orderDate = LocalDateTime.of(editOrderDatePicker.getValue(), LocalTime.now());\r\n            String status = editStatusComboBox.getValue();\r\n            String note = editNoteField.getText();\r\n\r\n            // Tạo order mới với thông tin cập nhật\r\n            Order updatedOrder = new Order(\r\n                    currentEditingOrder.getOrderId(),\r\n                    staffId,\r\n                    orderDate,\r\n                    0, // Sẽ tính lại\r\n                    status,\r\n                    note\r\n            );\r\n\r\n            // Tính tổng tiền\r\n            double total = detailsList.stream()\r\n                    .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\r\n                    .sum();\r\n            updatedOrder.setTotalAmount(total);\r\n\r\n            // Cập nhật vào database\r\n            boolean success = orderDao.updateOrder(updatedOrder, detailsList);\r\n\r\n            if (success) {\r\n                showAlert(\"Cập nhật đơn hàng thành công!\", Alert.AlertType.INFORMATION);\r\n                loadOrders(); // Reload danh sách\r\n                detailPane.setExpanded(false);\r\n            } else {\r\n                showAlert(\"Cập nhật thất bại. Vui lòng thử lại.\", Alert.AlertType.ERROR);\r\n            }\r\n\r\n        } catch (NumberFormatException e) {\r\n            showAlert(\"Vui lòng nhập đúng định dạng số cho mã nhân viên\", Alert.AlertType.ERROR);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Lỗi: \" + e.getMessage(), Alert.AlertType.ERROR);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleCancelEdit() {\r\n        detailPane.setExpanded(false);\r\n        currentEditingOrder = null;\r\n        clearEditForm();\r\n    }\r\n\r\n    private void handleDeleteOrder(Order order) {\r\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n        alert.setTitle(\"Xác nhận xóa\");\r\n        alert.setHeaderText(\"Bạn có chắc chắn muốn xóa đơn hàng #\" + order.getOrderId() + \"?\");\r\n        alert.setContentText(\"Hành động này không thể hoàn tác.\");\r\n\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            // Ở đây bạn có thể thêm phương thức deleteOrder trong OrderDao\r\n            // Tạm thời có thể cập nhật status thành \"Cancelled\"\r\n            boolean success = orderDao.updateOrderStatus(order.getOrderId(), \"Cancelled\");\r\n            if (success) {\r\n                showAlert(\"Đã hủy đơn hàng thành công!\", Alert.AlertType.INFORMATION);\r\n                loadOrders();\r\n            } else {\r\n                showAlert(\"Không thể hủy đơn hàng.\", Alert.AlertType.ERROR);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void clearEditForm() {\r\n        editOrderIdField.clear();\r\n        editStaffIdField.clear();\r\n        editOrderDatePicker.setValue(null);\r\n        editStatusComboBox.setValue(null);\r\n        editNoteField.clear();\r\n        detailsList.clear();\r\n        totalAmountLabel.setText(\"0 VND\");\r\n    }\r\n\r\n    private void showAlert(String message, Alert.AlertType type) {\r\n        Alert alert = new Alert(type);\r\n        alert.setTitle(\"Thông báo\");\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @FXML\r\n    private void handleAddProduct() {\r\n        if (currentEditingOrder == null) {\r\n            showAlert(\"Vui lòng chọn đơn hàng trước khi thêm sản phẩm\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n        showAddProductDialog();\r\n    }\r\n\r\n    @FXML\r\n    private void handleEditProduct() {\r\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\r\n        if (selected == null) {\r\n            showAlert(\"Vui lòng chọn sản phẩm cần sửa\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n        showEditProductDialog(selected);\r\n    }\r\n\r\n    @FXML\r\n    private void handleDeleteProduct() {\r\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\r\n        if (selected == null) {\r\n            showAlert(\"Vui lòng chọn sản phẩm cần xóa\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);\r\n        confirm.setTitle(\"Xác nhận xóa\");\r\n        confirm.setHeaderText(\"Xóa sản phẩm khỏi đơn hàng?\");\r\n        confirm.setContentText(\"Bạn có chắc chắn muốn xóa sản phẩm này?\");\r\n\r\n        Optional<ButtonType> result = confirm.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            detailsList.remove(selected);\r\n            updateTotalAmount();\r\n        }\r\n    }\r\n\r\n    private void showAddProductDialog() {\r\n        Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.setTitle(\"Thêm sản phẩm vào đơn hàng\");\r\n\r\n        VBox vbox = new VBox(15);\r\n        vbox.setPadding(new Insets(20));\r\n        vbox.setAlignment(Pos.CENTER);\r\n\r\n        // ComboBox chọn sản phẩm\r\n        Label lblProduct = new Label(\"Chọn sản phẩm:\");\r\n        ComboBox<Product> cbProducts = new ComboBox<>();\r\n\r\n        try {\r\n            List<Product> products = getSimpleProductList();\r\n            cbProducts.setItems(FXCollections.observableArrayList(products));\r\n            cbProducts.setConverter(new javafx.util.StringConverter<Product>() {\r\n                @Override\r\n                public String toString(Product product) {\r\n                    return product != null ? product.getNameProducts() + \" - \" + currencyFormat.format(product.getPrice()) : \"\";\r\n                }\r\n                @Override\r\n                public Product fromString(String string) {\r\n                    return null;\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Lỗi khi tải danh sách sản phẩm\", Alert.AlertType.ERROR);\r\n        }\r\n\r\n        // ComboBox chọn size\r\n        Label lblSize = new Label(\"Chọn size:\");\r\n        ComboBox<String> cbSize = new ComboBox<>();\r\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\r\n        cbSize.setValue(\"M\");\r\n\r\n        // Spinner số lượng\r\n        Label lblQuantity = new Label(\"Số lượng:\");\r\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, 1);\r\n        spinQuantity.setEditable(true);\r\n\r\n        // Buttons\r\n        HBox buttonBox = new HBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        Button btnAdd = new Button(\"Thêm\");\r\n        btnAdd.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\r\n        btnAdd.setOnAction(e -> {\r\n            Product selectedProduct = cbProducts.getValue();\r\n            if (selectedProduct == null) {\r\n                showAlert(\"Vui lòng chọn sản phẩm\", Alert.AlertType.WARNING);\r\n                return;\r\n            }\r\n\r\n            OrderDetail newDetail = new OrderDetail();\r\n            newDetail.setProductId(selectedProduct.getId());\r\n            newDetail.setProductName(selectedProduct.getNameProducts());\r\n            newDetail.setSize(cbSize.getValue());\r\n            newDetail.setQuantity(spinQuantity.getValue());\r\n            newDetail.setUnitPrice(selectedProduct.getPrice());\r\n\r\n            // Kiểm tra xem sản phẩm đã tồn tại chưa\r\n            OrderDetail existing = detailsList.stream()\r\n                    .filter(d -> d.getProductId() == newDetail.getProductId() &&\r\n                            d.getSize().equals(newDetail.getSize()))\r\n                    .findFirst()\r\n                    .orElse(null);\r\n\r\n            if (existing != null) {\r\n                existing.setQuantity(existing.getQuantity() + newDetail.getQuantity());\r\n                orderDetailsTable.refresh();\r\n            } else {\r\n                detailsList.add(newDetail);\r\n            }\r\n\r\n            updateTotalAmount();\r\n            dialog.close();\r\n        });\r\n\r\n        Button btnCancel = new Button(\"Hủy\");\r\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\r\n        btnCancel.setOnAction(e -> dialog.close());\r\n\r\n        buttonBox.getChildren().addAll(btnAdd, btnCancel);\r\n\r\n        vbox.getChildren().addAll(\r\n                lblProduct, cbProducts,\r\n                lblSize, cbSize,\r\n                lblQuantity, spinQuantity,\r\n                buttonBox\r\n        );\r\n\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        dialog.setScene(scene);\r\n        dialog.showAndWait();\r\n    }\r\n\r\n    private void showEditProductDialog(OrderDetail detail) {\r\n        Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.setTitle(\"Sửa sản phẩm\");\r\n\r\n        VBox vbox = new VBox(15);\r\n        vbox.setPadding(new Insets(20));\r\n        vbox.setAlignment(Pos.CENTER);\r\n\r\n        // Hiển thị tên sản phẩm\r\n        Label lblProduct = new Label(\"Sản phẩm: \" + detail.getProductName());\r\n        lblProduct.setStyle(\"-fx-font-weight: bold;\");\r\n\r\n        // ComboBox size\r\n        Label lblSize = new Label(\"Size:\");\r\n        ComboBox<String> cbSize = new ComboBox<>();\r\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\r\n        cbSize.setValue(detail.getSize());\r\n\r\n        // Spinner số lượng\r\n        Label lblQuantity = new Label(\"Số lượng:\");\r\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, detail.getQuantity());\r\n        spinQuantity.setEditable(true);\r\n\r\n        // Buttons\r\n        HBox buttonBox = new HBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        Button btnSave = new Button(\"Lưu\");\r\n        btnSave.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\r\n        btnSave.setOnAction(e -> {\r\n            detail.setSize(cbSize.getValue());\r\n            detail.setQuantity(spinQuantity.getValue());\r\n            orderDetailsTable.refresh();\r\n            updateTotalAmount();\r\n            dialog.close();\r\n        });\r\n\r\n        Button btnCancel = new Button(\"Hủy\");\r\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\r\n        btnCancel.setOnAction(e -> dialog.close());\r\n\r\n        buttonBox.getChildren().addAll(btnSave, btnCancel);\r\n\r\n        vbox.getChildren().addAll(\r\n                lblProduct,\r\n                lblSize, cbSize,\r\n                lblQuantity, spinQuantity,\r\n                buttonBox\r\n        );\r\n\r\n        Scene scene = new Scene(vbox, 350, 250);\r\n        dialog.setScene(scene);\r\n        dialog.showAndWait();\r\n    }\r\n\r\n    // Phương thức helper để lấy tên sản phẩm\r\n    private String getProductName(int productId) {\r\n        String sql = \"SELECT NameProducts FROM Products WHERE ID = ?\";\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setInt(1, productId);\r\n            ResultSet rs = stmt.executeQuery();\r\n            if (rs.next()) {\r\n                return rs.getString(\"NameProducts\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Phương thức helper để lấy danh sách sản phẩm đơn giản\r\n    private List<Product> getSimpleProductList() {\r\n        List<Product> products = new ArrayList<>();\r\n        String sql = \"SELECT ID, NameProducts, Price FROM Products\";\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql);\r\n             ResultSet rs = stmt.executeQuery()) {\r\n\r\n            while (rs.next()) {\r\n                Product p = new Product();\r\n                p.setId(rs.getInt(\"ID\"));\r\n                p.setNameProducts(rs.getString(\"NameProducts\"));\r\n                p.setPrice(rs.getDouble(\"Price\"));\r\n                products.add(p);\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"Lỗi khi lấy danh sách sản phẩm: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n        return products;\r\n    }\r\n}"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java"
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderUpdate.fxml",
                        "fsPath": "src\\main\\resources\\views\\Order\\OrderUpdate.fxml"
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderView.fxml",
                        "fsPath": "src\\main\\resources\\views\\Order\\OrderView.fxml"
                    },
                    {
                        "path": "src\\main\\resources\\views\\products\\Products.fxml",
                        "fsPath": "src\\main\\resources\\views\\products\\Products.fxml"
                    }
                ]
            },
            "createdAt": 1752086036147,
            "isInternal": false,
            "rawContent": {
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": "gen ra lại cho đển @FXML private TableColumn<OrderDetail, String> productNameColumn; được hiện thị đi ạ"
                            }
                        ]
                    }
                ]
            }
        },
        {
            "id": "d432c246-372c-40bf-a754-f17e6bf52616",
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "To ensure that the `productNameColumn` in your JavaFX application is displayed correctly, you need to make sure that the column is properly set up to retrieve and display the product name from the `OrderDetail` objects. Here's how you can do it:\n\n1. **Ensure the `OrderDetail` Model is Correct**: The `OrderDetail` class should have a `productName` property. From the retrieved chunks, it seems like this is already in place:\n\n   ```java\n   public class OrderDetail {\n       private int orderDetailId;\n       private int orderId;\n       private int productId;\n       private String size;\n       private int quantity;\n       private double unitPrice;\n       private String productName; // This is the property we need\n   }\n   ```\n\n2. **Set Up the TableColumn in the Controller**: In your `OrderUpdateController`, ensure that the `productNameColumn` is set up to use the `productName` property from the `OrderDetail` objects. You can do this using a `PropertyValueFactory`:\n\n   ```java\n   private void setupOrderDetailsTable() {\n       productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\n       productNameColumn.setCellValueFactory(new PropertyValueFactory<>(\"productName\")); // Ensure this line is present\n       sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\n       quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\n       unitPriceColumn.setCellValueFactory(cellData -> new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice())));\n       subtotalColumn.setCellValueFactory(cellData -> {\n           OrderDetail detail = cellData.getValue();\n           double subtotal = detail.getQuantity() * detail.getUnitPrice();\n           return new SimpleStringProperty(currencyFormat.format(subtotal));\n       });\n   }\n   ```\n\n3. **Load Product Names Correctly**: When loading order details, ensure that the product names are being set correctly. You have a method `loadOrderDetails` that seems to handle this:\n\n   ```java\n   private void loadOrderDetails(Order order) {\n       // ... existing code ...\n\n       // Set tên sản phẩm cho mỗi OrderDetail\n       if (productDAO != null) {\n           for (OrderDetail detail : details) {\n               try {\n                   // Lấy thông tin sản phẩm từ database\n                   String productName = getProductName(detail.getProductId());\n                   if (productName != null) {\n                       detail.setProductName(productName);\n                   } else {\n                       detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\n                   }\n               } catch (Exception e) {\n                   System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\n                   detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\n               }\n           }\n       }\n\n       // ... existing code ...\n   }\n   ```\n\n4. **FXML Configuration**: Ensure that your FXML file (`OrderUpdate.fxml`) has the `productNameColumn` defined with the correct `fx:id`:\n\n   ```xml\n   <TableColumn text=\"Tên SP\" fx:id=\"productNameColumn\" prefWidth=\"200\"/>\n   ```\n\nBy following these steps, you should be able to display the product names in the `productNameColumn` of your `orderDetailsTable`. If you encounter any issues, double-check that the `OrderDetail` objects are being populated with the correct product names before they are added to the table."
                }
            ],
            "context": {
                "currentFile": {
                    "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                    "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                    "sources": [
                        "opened_tab"
                    ],
                    "content": "package com.coffeeshop.coffeeshop.controller;\r\n\r\nimport com.coffeeshop.coffeeshop.dao.OrderDao;\r\nimport com.coffeeshop.coffeeshop.dao.ProductDAO;\r\nimport com.coffeeshop.coffeeshop.model.Order;\r\nimport com.coffeeshop.coffeeshop.model.OrderDetail;\r\nimport com.coffeeshop.coffeeshop.model.Product;\r\nimport com.coffeeshop.coffeeshop.util.DBConnection;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.beans.property.SimpleIntegerProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Callback;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.text.DecimalFormat;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class OrderUpdateController {\r\n\r\n    @FXML private TextField searchField;\r\n    @FXML private ComboBox<String> filterStatusComboBox;\r\n    @FXML private TableView<Order> ordersTable;\r\n    @FXML private TableColumn<Order, Integer> orderIdColumn;\r\n    @FXML private TableColumn<Order, Integer> staffIdColumn;\r\n    @FXML private TableColumn<Order, String> orderDateColumn;\r\n    @FXML private TableColumn<Order, String> totalAmountColumn;\r\n    @FXML private TableColumn<Order, String> statusColumn;\r\n    @FXML private TableColumn<Order, String> noteColumn;\r\n    @FXML private TableColumn<Order, Void> actionColumn;\r\n\r\n    @FXML private TitledPane detailPane;\r\n    @FXML private TextField editOrderIdField;\r\n    @FXML private TextField editStaffIdField;\r\n    @FXML private DatePicker editOrderDatePicker;\r\n    @FXML private ComboBox<String> editStatusComboBox;\r\n    @FXML private TextField editNoteField;\r\n\r\n    @FXML private TableView<OrderDetail> orderDetailsTable;\r\n    @FXML private TableColumn<OrderDetail, Integer> productIdColumn;\r\n    @FXML private TableColumn<OrderDetail, String> productNameColumn;\r\n    @FXML private TableColumn<OrderDetail, String> sizeColumn;\r\n    @FXML private TableColumn<OrderDetail, Integer> quantityColumn;\r\n    @FXML private TableColumn<OrderDetail, String> unitPriceColumn;\r\n    @FXML private TableColumn<OrderDetail, String> subtotalColumn;\r\n    @FXML private Label totalAmountLabel;\r\n\r\n    private OrderDao orderDao;\r\n    private ProductDAO productDAO;\r\n    private ObservableList<Order> ordersList = FXCollections.observableArrayList();\r\n    private ObservableList<Order> filteredOrdersList = FXCollections.observableArrayList();\r\n    private ObservableList<OrderDetail> detailsList = FXCollections.observableArrayList();\r\n    private Order currentEditingOrder;\r\n    private DecimalFormat currencyFormat = new DecimalFormat(\"#,###.## VND\");\r\n    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\r\n    private Connection connection;\r\n\r\n    public void setConnection(Connection connection) {\r\n        System.out.println(\"=== DEBUG: setConnection() được gọi ===\");\r\n        this.connection = connection;\r\n        System.out.println(\"DEBUG: Connection đã được set: \" + (connection != null ? \"Thành công\" : \"Null\"));\r\n\r\n        this.orderDao = new OrderDao(connection);\r\n        System.out.println(\"DEBUG: OrderDao đã được khởi tạo\");\r\n\r\n        loadOrders();\r\n    }\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        System.out.println(\"=== DEBUG: initialize() bắt đầu ===\");\r\n\r\n        // Khởi tạo ComboBox\r\n        ObservableList<String> statusOptions = FXCollections.observableArrayList(\r\n                \"Tất cả\", \"Pending\", \"Completed\", \"Cancelled\"\r\n        );\r\n        filterStatusComboBox.setItems(statusOptions);\r\n        filterStatusComboBox.setValue(\"Tất cả\");\r\n\r\n        editStatusComboBox.setItems(FXCollections.observableArrayList(\r\n                \"Pending\", \"Completed\", \"Cancelled\"\r\n        ));\r\n\r\n        // Cấu hình bảng đơn hàng\r\n        setupOrdersTable();\r\n\r\n        // Cấu hình bảng chi tiết đơn hàng\r\n        setupOrderDetailsTable();\r\n\r\n        // THÊM DEBUG: Kiểm tra connection\r\n        System.out.println(\"DEBUG: Connection trong initialize(): \" + (connection != null ? \"Có\" : \"NULL\"));\r\n        System.out.println(\"DEBUG: OrderDao trong initialize(): \" + (orderDao != null ? \"Có\" : \"NULL\"));\r\n\r\n        // Nếu connection chưa có thì thử tạo connection tự động\r\n        if (connection == null) {\r\n            System.out.println(\"DEBUG: Connection chưa có, thử tạo connection tự động\");\r\n            try {\r\n                System.out.println(\"DEBUG: Đang gọi DBConnection.getConnection()...\");\r\n                Connection conn = DBConnection.getConnection();\r\n                System.out.println(\"DEBUG: DBConnection.getConnection() returned: \" + conn);\r\n\r\n                if (conn != null) {\r\n                    System.out.println(\"DEBUG: Connection thành công, khởi tạo OrderDao...\");\r\n                    this.connection = conn;\r\n                    this.orderDao = new OrderDao(conn);\r\n                    this.productDAO = new ProductDAO(conn);\r\n                    System.out.println(\"DEBUG: Đã tạo connection, OrderDao và ProductDAO tự động thành công\");\r\n                    loadOrders();\r\n                } else {\r\n                    System.out.println(\"DEBUG: Connection trả về null\");\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"DEBUG: Exception khi tạo connection: \" + e.getClass().getName());\r\n                System.out.println(\"DEBUG: Exception message: \" + e.getMessage());\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        System.out.println(\"DEBUG: initialize() hoàn thành\");\r\n    }\r\n\r\n    private void setupOrdersTable() {\r\n        orderIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\r\n        staffIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"staffId\"));\r\n\r\n        orderDateColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(cellData.getValue().getOrderDate().format(dateTimeFormatter))\r\n        );\r\n\r\n        totalAmountColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getTotalAmount()))\r\n        );\r\n\r\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\r\n        noteColumn.setCellValueFactory(new PropertyValueFactory<>(\"note\"));\r\n\r\n        // Thêm nút hành động\r\n        setupActionColumn();\r\n\r\n        // Xử lý double click để xem chi tiết\r\n        ordersTable.setRowFactory(tv -> {\r\n            TableRow<Order> row = new TableRow<>();\r\n            row.setOnMouseClicked(event -> {\r\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\r\n                    loadOrderDetails(row.getItem());\r\n                }\r\n            });\r\n            return row;\r\n        });\r\n    }\r\n\r\n    private void setupActionColumn() {\r\n        Callback<TableColumn<Order, Void>, TableCell<Order, Void>> cellFactory = new Callback<>() {\r\n            @Override\r\n            public TableCell<Order, Void> call(final TableColumn<Order, Void> param) {\r\n                final TableCell<Order, Void> cell = new TableCell<>() {\r\n                    private final Button editBtn = new Button(\"Sửa\");\r\n                    private final Button deleteBtn = new Button(\"Xóa\");\r\n\r\n                    {\r\n                        editBtn.setStyle(\"-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-cursor: hand;\");\r\n                        deleteBtn.setStyle(\"-fx-background-color: #dc3545; -fx-text-fill: white; -fx-cursor: hand;\");\r\n\r\n                        editBtn.setOnAction(event -> {\r\n                            Order order = getTableView().getItems().get(getIndex());\r\n                            loadOrderDetails(order);\r\n                        });\r\n\r\n                        deleteBtn.setOnAction(event -> {\r\n                            Order order = getTableView().getItems().get(getIndex());\r\n                            handleDeleteOrder(order);\r\n                        });\r\n                    }\r\n\r\n                    @Override\r\n                    protected void updateItem(Void item, boolean empty) {\r\n                        super.updateItem(item, empty);\r\n                        if (empty) {\r\n                            setGraphic(null);\r\n                        } else {\r\n                            HBox hbox = new HBox(10);\r\n                            hbox.getChildren().addAll(editBtn, deleteBtn);\r\n                            setGraphic(hbox);\r\n                        }\r\n                    }\r\n                };\r\n                return cell;\r\n            }\r\n        };\r\n\r\n        actionColumn.setCellFactory(cellFactory);\r\n    }\r\n\r\n    private void setupOrderDetailsTable() {\r\n        productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\r\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\r\n        quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\r\n\r\n        unitPriceColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice()))\r\n        );\r\n\r\n        subtotalColumn.setCellValueFactory(cellData -> {\r\n            OrderDetail detail = cellData.getValue();\r\n            double subtotal = detail.getQuantity() * detail.getUnitPrice();\r\n            return new SimpleStringProperty(currencyFormat.format(subtotal));\r\n        });\r\n    }\r\n\r\n    private void loadOrders() {\r\n        System.out.println(\"=== DEBUG: loadOrders() bắt đầu ===\");\r\n\r\n        if (orderDao == null) {\r\n            System.out.println(\"DEBUG: orderDao is null, không thể load orders\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            List<Order> orders = orderDao.getAllOrders();\r\n            System.out.println(\"DEBUG: Số lượng orders lấy được: \" + (orders != null ? orders.size() : 0));\r\n\r\n            if (orders != null) {\r\n                ordersList.setAll(orders);\r\n                filteredOrdersList.setAll(orders);\r\n                ordersTable.setItems(filteredOrdersList);\r\n                System.out.println(\"DEBUG: Đã load \" + orders.size() + \" orders vào table\");\r\n            } else {\r\n                System.out.println(\"DEBUG: getAllOrders() trả về null\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"DEBUG: Lỗi trong loadOrders(): \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"DEBUG: loadOrders() hoàn thành\");\r\n    }\r\n\r\n    @FXML\r\n    private void handleSearch() {\r\n        System.out.println(\"=== DEBUG: handleSearch() được gọi ===\");\r\n\r\n        if (ordersList == null || ordersList.isEmpty()) {\r\n            System.out.println(\"DEBUG: ordersList is null or empty\");\r\n            showAlert(\"Không có dữ liệu để tìm kiếm\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        String searchText = searchField.getText().toLowerCase();\r\n        String selectedStatus = filterStatusComboBox.getValue();\r\n\r\n        System.out.println(\"DEBUG: Search text: \" + searchText + \", Status: \" + selectedStatus);\r\n\r\n        List<Order> filtered = ordersList.stream()\r\n                .filter(order -> {\r\n                    boolean matchesSearch = searchText.isEmpty() ||\r\n                            String.valueOf(order.getOrderId()).contains(searchText) ||\r\n                            String.valueOf(order.getStaffId()).contains(searchText) ||\r\n                            (order.getNote() != null && order.getNote().toLowerCase().contains(searchText));\r\n\r\n                    boolean matchesStatus = \"Tất cả\".equals(selectedStatus) ||\r\n                            order.getStatus().equals(selectedStatus);\r\n\r\n                    return matchesSearch && matchesStatus;\r\n                })\r\n                .collect(Collectors.toList());\r\n\r\n        System.out.println(\"DEBUG: Số orders sau khi filter: \" + filtered.size());\r\n        filteredOrdersList.setAll(filtered);\r\n    }\r\n\r\n    @FXML\r\n    private void handleRefresh() {\r\n        searchField.clear();\r\n        filterStatusComboBox.setValue(\"Tất cả\");\r\n        loadOrders();\r\n        detailPane.setExpanded(false);\r\n    }\r\n\r\n    private void loadOrderDetails(Order order) {\r\n        currentEditingOrder = order;\r\n\r\n        // Load thông tin order\r\n        editOrderIdField.setText(String.valueOf(order.getOrderId()));\r\n        editStaffIdField.setText(String.valueOf(order.getStaffId()));\r\n        editOrderDatePicker.setValue(order.getOrderDate().toLocalDate());\r\n        editStatusComboBox.setValue(order.getStatus());\r\n        editNoteField.setText(order.getNote());\r\n\r\n        // Load chi tiết order\r\n        List<OrderDetail> details = orderDao.getOrderDetails(order.getOrderId());\r\n\r\n        // Set tên sản phẩm cho mỗi OrderDetail\r\n        if (productDAO != null) {\r\n            for (OrderDetail detail : details) {\r\n                try {\r\n                    // Lấy thông tin sản phẩm từ database\r\n                    String productName = getProductName(detail.getProductId());\r\n                    if (productName != null) {\r\n                        detail.setProductName(productName);\r\n                    } else {\r\n                        detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\r\n                    }\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\r\n                    detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\r\n                }\r\n            }\r\n        }\r\n\r\n        detailsList.clear();\r\n        detailsList.addAll(details);\r\n        orderDetailsTable.setItems(detailsList);\r\n\r\n        // Tính tổng tiền\r\n        updateTotalAmount();\r\n\r\n        // Mở panel chi tiết\r\n        detailPane.setExpanded(true);\r\n    }\r\n\r\n    private void updateTotalAmount() {\r\n        double total = detailsList.stream()\r\n                .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\r\n                .sum();\r\n        totalAmountLabel.setText(currencyFormat.format(total));\r\n    }\r\n\r\n    @FXML\r\n    private void handleUpdateOrder() {\r\n        if (currentEditingOrder == null) {\r\n            showAlert(\"Vui lòng chọn đơn hàng cần cập nhật\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Lấy thông tin mới\r\n            int staffId = Integer.parseInt(editStaffIdField.getText());\r\n            LocalDateTime orderDate = LocalDateTime.of(editOrderDatePicker.getValue(), LocalTime.now());\r\n            String status = editStatusComboBox.getValue();\r\n            String note = editNoteField.getText();\r\n\r\n            // Tạo order mới với thông tin cập nhật\r\n            Order updatedOrder = new Order(\r\n                    currentEditingOrder.getOrderId(),\r\n                    staffId,\r\n                    orderDate,\r\n                    0, // Sẽ tính lại\r\n                    status,\r\n                    note\r\n            );\r\n\r\n            // Tính tổng tiền\r\n            double total = detailsList.stream()\r\n                    .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\r\n                    .sum();\r\n            updatedOrder.setTotalAmount(total);\r\n\r\n            // Cập nhật vào database\r\n            boolean success = orderDao.updateOrder(updatedOrder, detailsList);\r\n\r\n            if (success) {\r\n                showAlert(\"Cập nhật đơn hàng thành công!\", Alert.AlertType.INFORMATION);\r\n                loadOrders(); // Reload danh sách\r\n                detailPane.setExpanded(false);\r\n            } else {\r\n                showAlert(\"Cập nhật thất bại. Vui lòng thử lại.\", Alert.AlertType.ERROR);\r\n            }\r\n\r\n        } catch (NumberFormatException e) {\r\n            showAlert(\"Vui lòng nhập đúng định dạng số cho mã nhân viên\", Alert.AlertType.ERROR);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Lỗi: \" + e.getMessage(), Alert.AlertType.ERROR);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleCancelEdit() {\r\n        detailPane.setExpanded(false);\r\n        currentEditingOrder = null;\r\n        clearEditForm();\r\n    }\r\n\r\n    private void handleDeleteOrder(Order order) {\r\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n        alert.setTitle(\"Xác nhận xóa\");\r\n        alert.setHeaderText(\"Bạn có chắc chắn muốn xóa đơn hàng #\" + order.getOrderId() + \"?\");\r\n        alert.setContentText(\"Hành động này không thể hoàn tác.\");\r\n\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            // Ở đây bạn có thể thêm phương thức deleteOrder trong OrderDao\r\n            // Tạm thời có thể cập nhật status thành \"Cancelled\"\r\n            boolean success = orderDao.updateOrderStatus(order.getOrderId(), \"Cancelled\");\r\n            if (success) {\r\n                showAlert(\"Đã hủy đơn hàng thành công!\", Alert.AlertType.INFORMATION);\r\n                loadOrders();\r\n            } else {\r\n                showAlert(\"Không thể hủy đơn hàng.\", Alert.AlertType.ERROR);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void clearEditForm() {\r\n        editOrderIdField.clear();\r\n        editStaffIdField.clear();\r\n        editOrderDatePicker.setValue(null);\r\n        editStatusComboBox.setValue(null);\r\n        editNoteField.clear();\r\n        detailsList.clear();\r\n        totalAmountLabel.setText(\"0 VND\");\r\n    }\r\n\r\n    private void showAlert(String message, Alert.AlertType type) {\r\n        Alert alert = new Alert(type);\r\n        alert.setTitle(\"Thông báo\");\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @FXML\r\n    private void handleAddProduct() {\r\n        if (currentEditingOrder == null) {\r\n            showAlert(\"Vui lòng chọn đơn hàng trước khi thêm sản phẩm\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n        showAddProductDialog();\r\n    }\r\n\r\n    @FXML\r\n    private void handleEditProduct() {\r\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\r\n        if (selected == null) {\r\n            showAlert(\"Vui lòng chọn sản phẩm cần sửa\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n        showEditProductDialog(selected);\r\n    }\r\n\r\n    @FXML\r\n    private void handleDeleteProduct() {\r\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\r\n        if (selected == null) {\r\n            showAlert(\"Vui lòng chọn sản phẩm cần xóa\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);\r\n        confirm.setTitle(\"Xác nhận xóa\");\r\n        confirm.setHeaderText(\"Xóa sản phẩm khỏi đơn hàng?\");\r\n        confirm.setContentText(\"Bạn có chắc chắn muốn xóa sản phẩm này?\");\r\n\r\n        Optional<ButtonType> result = confirm.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            detailsList.remove(selected);\r\n            updateTotalAmount();\r\n        }\r\n    }\r\n\r\n    private void showAddProductDialog() {\r\n        Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.setTitle(\"Thêm sản phẩm vào đơn hàng\");\r\n\r\n        VBox vbox = new VBox(15);\r\n        vbox.setPadding(new Insets(20));\r\n        vbox.setAlignment(Pos.CENTER);\r\n\r\n        // ComboBox chọn sản phẩm\r\n        Label lblProduct = new Label(\"Chọn sản phẩm:\");\r\n        ComboBox<Product> cbProducts = new ComboBox<>();\r\n\r\n        try {\r\n            List<Product> products = getSimpleProductList();\r\n            cbProducts.setItems(FXCollections.observableArrayList(products));\r\n            cbProducts.setConverter(new javafx.util.StringConverter<Product>() {\r\n                @Override\r\n                public String toString(Product product) {\r\n                    return product != null ? product.getNameProducts() + \" - \" + currencyFormat.format(product.getPrice()) : \"\";\r\n                }\r\n                @Override\r\n                public Product fromString(String string) {\r\n                    return null;\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Lỗi khi tải danh sách sản phẩm\", Alert.AlertType.ERROR);\r\n        }\r\n\r\n        // ComboBox chọn size\r\n        Label lblSize = new Label(\"Chọn size:\");\r\n        ComboBox<String> cbSize = new ComboBox<>();\r\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\r\n        cbSize.setValue(\"M\");\r\n\r\n        // Spinner số lượng\r\n        Label lblQuantity = new Label(\"Số lượng:\");\r\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, 1);\r\n        spinQuantity.setEditable(true);\r\n\r\n        // Buttons\r\n        HBox buttonBox = new HBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        Button btnAdd = new Button(\"Thêm\");\r\n        btnAdd.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\r\n        btnAdd.setOnAction(e -> {\r\n            Product selectedProduct = cbProducts.getValue();\r\n            if (selectedProduct == null) {\r\n                showAlert(\"Vui lòng chọn sản phẩm\", Alert.AlertType.WARNING);\r\n                return;\r\n            }\r\n\r\n            OrderDetail newDetail = new OrderDetail();\r\n            newDetail.setProductId(selectedProduct.getId());\r\n            newDetail.setProductName(selectedProduct.getNameProducts());\r\n            newDetail.setSize(cbSize.getValue());\r\n            newDetail.setQuantity(spinQuantity.getValue());\r\n            newDetail.setUnitPrice(selectedProduct.getPrice());\r\n\r\n            // Kiểm tra xem sản phẩm đã tồn tại chưa\r\n            OrderDetail existing = detailsList.stream()\r\n                    .filter(d -> d.getProductId() == newDetail.getProductId() &&\r\n                            d.getSize().equals(newDetail.getSize()))\r\n                    .findFirst()\r\n                    .orElse(null);\r\n\r\n            if (existing != null) {\r\n                existing.setQuantity(existing.getQuantity() + newDetail.getQuantity());\r\n                orderDetailsTable.refresh();\r\n            } else {\r\n                detailsList.add(newDetail);\r\n            }\r\n\r\n            updateTotalAmount();\r\n            dialog.close();\r\n        });\r\n\r\n        Button btnCancel = new Button(\"Hủy\");\r\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\r\n        btnCancel.setOnAction(e -> dialog.close());\r\n\r\n        buttonBox.getChildren().addAll(btnAdd, btnCancel);\r\n\r\n        vbox.getChildren().addAll(\r\n                lblProduct, cbProducts,\r\n                lblSize, cbSize,\r\n                lblQuantity, spinQuantity,\r\n                buttonBox\r\n        );\r\n\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        dialog.setScene(scene);\r\n        dialog.showAndWait();\r\n    }\r\n\r\n    private void showEditProductDialog(OrderDetail detail) {\r\n        Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.setTitle(\"Sửa sản phẩm\");\r\n\r\n        VBox vbox = new VBox(15);\r\n        vbox.setPadding(new Insets(20));\r\n        vbox.setAlignment(Pos.CENTER);\r\n\r\n        // Hiển thị tên sản phẩm\r\n        Label lblProduct = new Label(\"Sản phẩm: \" + detail.getProductName());\r\n        lblProduct.setStyle(\"-fx-font-weight: bold;\");\r\n\r\n        // ComboBox size\r\n        Label lblSize = new Label(\"Size:\");\r\n        ComboBox<String> cbSize = new ComboBox<>();\r\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\r\n        cbSize.setValue(detail.getSize());\r\n\r\n        // Spinner số lượng\r\n        Label lblQuantity = new Label(\"Số lượng:\");\r\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, detail.getQuantity());\r\n        spinQuantity.setEditable(true);\r\n\r\n        // Buttons\r\n        HBox buttonBox = new HBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        Button btnSave = new Button(\"Lưu\");\r\n        btnSave.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\r\n        btnSave.setOnAction(e -> {\r\n            detail.setSize(cbSize.getValue());\r\n            detail.setQuantity(spinQuantity.getValue());\r\n            orderDetailsTable.refresh();\r\n            updateTotalAmount();\r\n            dialog.close();\r\n        });\r\n\r\n        Button btnCancel = new Button(\"Hủy\");\r\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\r\n        btnCancel.setOnAction(e -> dialog.close());\r\n\r\n        buttonBox.getChildren().addAll(btnSave, btnCancel);\r\n\r\n        vbox.getChildren().addAll(\r\n                lblProduct,\r\n                lblSize, cbSize,\r\n                lblQuantity, spinQuantity,\r\n                buttonBox\r\n        );\r\n\r\n        Scene scene = new Scene(vbox, 350, 250);\r\n        dialog.setScene(scene);\r\n        dialog.showAndWait();\r\n    }\r\n\r\n    // Phương thức helper để lấy tên sản phẩm\r\n    private String getProductName(int productId) {\r\n        String sql = \"SELECT NameProducts FROM Products WHERE ID = ?\";\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setInt(1, productId);\r\n            ResultSet rs = stmt.executeQuery();\r\n            if (rs.next()) {\r\n                return rs.getString(\"NameProducts\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Phương thức helper để lấy danh sách sản phẩm đơn giản\r\n    private List<Product> getSimpleProductList() {\r\n        List<Product> products = new ArrayList<>();\r\n        String sql = \"SELECT ID, NameProducts, Price FROM Products\";\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql);\r\n             ResultSet rs = stmt.executeQuery()) {\r\n\r\n            while (rs.next()) {\r\n                Product p = new Product();\r\n                p.setId(rs.getInt(\"ID\"));\r\n                p.setNameProducts(rs.getString(\"NameProducts\"));\r\n                p.setPrice(rs.getDouble(\"Price\"));\r\n                products.add(p);\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"Lỗi khi lấy danh sách sản phẩm: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n        return products;\r\n    }\r\n}"
                },
                "codebaseEnabled": true,
                "ragFiles": [
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/model/OrderDetail.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/dao/OrderDao.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\dao\\OrderDao.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/LoginController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\LoginController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/CreateUserController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CreateUserController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/MainViewController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\MainViewController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/HomeUserController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\HomeUserController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/ProductController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/CategoriesController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": [
                            "keyword_search"
                        ]
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\resources\\views\\products\\Products.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\products\\Products.fxml",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\CategoriesController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderView.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\Order\\OrderView.fxml",
                        "sources": []
                    },
                    {
                        "path": "pom.xml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\pom.xml",
                        "sources": []
                    },
                    {
                        "path": ".gitignore",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\.gitignore",
                        "sources": []
                    },
                    {
                        "path": ".mvn\\wrapper\\maven-wrapper.properties",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\.mvn\\wrapper\\maven-wrapper.properties",
                        "sources": []
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "sources": []
                    },
                    {
                        "path": "src/main/java/com/coffeeshop/coffeeshop/controller/OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "opened_tab"
                        ]
                    },
                    {
                        "path": "src/main/resources/views/Order/OrderUpdate.fxml",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\resources\\views\\Order\\OrderUpdate.fxml",
                        "sources": [
                            "opened_tab"
                        ]
                    }
                ],
                "rerankedFiles": [
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java"
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderUpdate.fxml",
                        "fsPath": "src\\main\\resources\\views\\Order\\OrderUpdate.fxml"
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderView.fxml",
                        "fsPath": "src\\main\\resources\\views\\Order\\OrderView.fxml"
                    },
                    {
                        "path": "src\\main\\resources\\views\\products\\Products.fxml",
                        "fsPath": "src\\main\\resources\\views\\products\\Products.fxml"
                    }
                ],
                "usedFilePaths": [
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "fsPath": "D:\\STUDY-HUFLIT\\CoffeeShop\\coffeeShop\\src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderUpdateController.java",
                        "sources": [
                            "opened_tab"
                        ],
                        "content": "package com.coffeeshop.coffeeshop.controller;\r\n\r\nimport com.coffeeshop.coffeeshop.dao.OrderDao;\r\nimport com.coffeeshop.coffeeshop.dao.ProductDAO;\r\nimport com.coffeeshop.coffeeshop.model.Order;\r\nimport com.coffeeshop.coffeeshop.model.OrderDetail;\r\nimport com.coffeeshop.coffeeshop.model.Product;\r\nimport com.coffeeshop.coffeeshop.util.DBConnection;\r\nimport javafx.beans.property.SimpleDoubleProperty;\r\nimport javafx.beans.property.SimpleIntegerProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXML;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Callback;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.text.DecimalFormat;\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class OrderUpdateController {\r\n\r\n    @FXML private TextField searchField;\r\n    @FXML private ComboBox<String> filterStatusComboBox;\r\n    @FXML private TableView<Order> ordersTable;\r\n    @FXML private TableColumn<Order, Integer> orderIdColumn;\r\n    @FXML private TableColumn<Order, Integer> staffIdColumn;\r\n    @FXML private TableColumn<Order, String> orderDateColumn;\r\n    @FXML private TableColumn<Order, String> totalAmountColumn;\r\n    @FXML private TableColumn<Order, String> statusColumn;\r\n    @FXML private TableColumn<Order, String> noteColumn;\r\n    @FXML private TableColumn<Order, Void> actionColumn;\r\n\r\n    @FXML private TitledPane detailPane;\r\n    @FXML private TextField editOrderIdField;\r\n    @FXML private TextField editStaffIdField;\r\n    @FXML private DatePicker editOrderDatePicker;\r\n    @FXML private ComboBox<String> editStatusComboBox;\r\n    @FXML private TextField editNoteField;\r\n\r\n    @FXML private TableView<OrderDetail> orderDetailsTable;\r\n    @FXML private TableColumn<OrderDetail, Integer> productIdColumn;\r\n    @FXML private TableColumn<OrderDetail, String> productNameColumn;\r\n    @FXML private TableColumn<OrderDetail, String> sizeColumn;\r\n    @FXML private TableColumn<OrderDetail, Integer> quantityColumn;\r\n    @FXML private TableColumn<OrderDetail, String> unitPriceColumn;\r\n    @FXML private TableColumn<OrderDetail, String> subtotalColumn;\r\n    @FXML private Label totalAmountLabel;\r\n\r\n    private OrderDao orderDao;\r\n    private ProductDAO productDAO;\r\n    private ObservableList<Order> ordersList = FXCollections.observableArrayList();\r\n    private ObservableList<Order> filteredOrdersList = FXCollections.observableArrayList();\r\n    private ObservableList<OrderDetail> detailsList = FXCollections.observableArrayList();\r\n    private Order currentEditingOrder;\r\n    private DecimalFormat currencyFormat = new DecimalFormat(\"#,###.## VND\");\r\n    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");\r\n    private Connection connection;\r\n\r\n    public void setConnection(Connection connection) {\r\n        System.out.println(\"=== DEBUG: setConnection() được gọi ===\");\r\n        this.connection = connection;\r\n        System.out.println(\"DEBUG: Connection đã được set: \" + (connection != null ? \"Thành công\" : \"Null\"));\r\n\r\n        this.orderDao = new OrderDao(connection);\r\n        System.out.println(\"DEBUG: OrderDao đã được khởi tạo\");\r\n\r\n        loadOrders();\r\n    }\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        System.out.println(\"=== DEBUG: initialize() bắt đầu ===\");\r\n\r\n        // Khởi tạo ComboBox\r\n        ObservableList<String> statusOptions = FXCollections.observableArrayList(\r\n                \"Tất cả\", \"Pending\", \"Completed\", \"Cancelled\"\r\n        );\r\n        filterStatusComboBox.setItems(statusOptions);\r\n        filterStatusComboBox.setValue(\"Tất cả\");\r\n\r\n        editStatusComboBox.setItems(FXCollections.observableArrayList(\r\n                \"Pending\", \"Completed\", \"Cancelled\"\r\n        ));\r\n\r\n        // Cấu hình bảng đơn hàng\r\n        setupOrdersTable();\r\n\r\n        // Cấu hình bảng chi tiết đơn hàng\r\n        setupOrderDetailsTable();\r\n\r\n        // THÊM DEBUG: Kiểm tra connection\r\n        System.out.println(\"DEBUG: Connection trong initialize(): \" + (connection != null ? \"Có\" : \"NULL\"));\r\n        System.out.println(\"DEBUG: OrderDao trong initialize(): \" + (orderDao != null ? \"Có\" : \"NULL\"));\r\n\r\n        // Nếu connection chưa có thì thử tạo connection tự động\r\n        if (connection == null) {\r\n            System.out.println(\"DEBUG: Connection chưa có, thử tạo connection tự động\");\r\n            try {\r\n                System.out.println(\"DEBUG: Đang gọi DBConnection.getConnection()...\");\r\n                Connection conn = DBConnection.getConnection();\r\n                System.out.println(\"DEBUG: DBConnection.getConnection() returned: \" + conn);\r\n\r\n                if (conn != null) {\r\n                    System.out.println(\"DEBUG: Connection thành công, khởi tạo OrderDao...\");\r\n                    this.connection = conn;\r\n                    this.orderDao = new OrderDao(conn);\r\n                    this.productDAO = new ProductDAO(conn);\r\n                    System.out.println(\"DEBUG: Đã tạo connection, OrderDao và ProductDAO tự động thành công\");\r\n                    loadOrders();\r\n                } else {\r\n                    System.out.println(\"DEBUG: Connection trả về null\");\r\n                }\r\n            } catch (Exception e) {\r\n                System.out.println(\"DEBUG: Exception khi tạo connection: \" + e.getClass().getName());\r\n                System.out.println(\"DEBUG: Exception message: \" + e.getMessage());\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        System.out.println(\"DEBUG: initialize() hoàn thành\");\r\n    }\r\n\r\n    private void setupOrdersTable() {\r\n        orderIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"orderId\"));\r\n        staffIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"staffId\"));\r\n\r\n        orderDateColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(cellData.getValue().getOrderDate().format(dateTimeFormatter))\r\n        );\r\n\r\n        totalAmountColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getTotalAmount()))\r\n        );\r\n\r\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\r\n        noteColumn.setCellValueFactory(new PropertyValueFactory<>(\"note\"));\r\n\r\n        // Thêm nút hành động\r\n        setupActionColumn();\r\n\r\n        // Xử lý double click để xem chi tiết\r\n        ordersTable.setRowFactory(tv -> {\r\n            TableRow<Order> row = new TableRow<>();\r\n            row.setOnMouseClicked(event -> {\r\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\r\n                    loadOrderDetails(row.getItem());\r\n                }\r\n            });\r\n            return row;\r\n        });\r\n    }\r\n\r\n    private void setupActionColumn() {\r\n        Callback<TableColumn<Order, Void>, TableCell<Order, Void>> cellFactory = new Callback<>() {\r\n            @Override\r\n            public TableCell<Order, Void> call(final TableColumn<Order, Void> param) {\r\n                final TableCell<Order, Void> cell = new TableCell<>() {\r\n                    private final Button editBtn = new Button(\"Sửa\");\r\n                    private final Button deleteBtn = new Button(\"Xóa\");\r\n\r\n                    {\r\n                        editBtn.setStyle(\"-fx-background-color: #17a2b8; -fx-text-fill: white; -fx-cursor: hand;\");\r\n                        deleteBtn.setStyle(\"-fx-background-color: #dc3545; -fx-text-fill: white; -fx-cursor: hand;\");\r\n\r\n                        editBtn.setOnAction(event -> {\r\n                            Order order = getTableView().getItems().get(getIndex());\r\n                            loadOrderDetails(order);\r\n                        });\r\n\r\n                        deleteBtn.setOnAction(event -> {\r\n                            Order order = getTableView().getItems().get(getIndex());\r\n                            handleDeleteOrder(order);\r\n                        });\r\n                    }\r\n\r\n                    @Override\r\n                    protected void updateItem(Void item, boolean empty) {\r\n                        super.updateItem(item, empty);\r\n                        if (empty) {\r\n                            setGraphic(null);\r\n                        } else {\r\n                            HBox hbox = new HBox(10);\r\n                            hbox.getChildren().addAll(editBtn, deleteBtn);\r\n                            setGraphic(hbox);\r\n                        }\r\n                    }\r\n                };\r\n                return cell;\r\n            }\r\n        };\r\n\r\n        actionColumn.setCellFactory(cellFactory);\r\n    }\r\n\r\n    private void setupOrderDetailsTable() {\r\n        productIdColumn.setCellValueFactory(new PropertyValueFactory<>(\"productId\"));\r\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\r\n        quantityColumn.setCellValueFactory(new PropertyValueFactory<>(\"quantity\"));\r\n\r\n        unitPriceColumn.setCellValueFactory(cellData ->\r\n                new SimpleStringProperty(currencyFormat.format(cellData.getValue().getUnitPrice()))\r\n        );\r\n\r\n        subtotalColumn.setCellValueFactory(cellData -> {\r\n            OrderDetail detail = cellData.getValue();\r\n            double subtotal = detail.getQuantity() * detail.getUnitPrice();\r\n            return new SimpleStringProperty(currencyFormat.format(subtotal));\r\n        });\r\n    }\r\n\r\n    private void loadOrders() {\r\n        System.out.println(\"=== DEBUG: loadOrders() bắt đầu ===\");\r\n\r\n        if (orderDao == null) {\r\n            System.out.println(\"DEBUG: orderDao is null, không thể load orders\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            List<Order> orders = orderDao.getAllOrders();\r\n            System.out.println(\"DEBUG: Số lượng orders lấy được: \" + (orders != null ? orders.size() : 0));\r\n\r\n            if (orders != null) {\r\n                ordersList.setAll(orders);\r\n                filteredOrdersList.setAll(orders);\r\n                ordersTable.setItems(filteredOrdersList);\r\n                System.out.println(\"DEBUG: Đã load \" + orders.size() + \" orders vào table\");\r\n            } else {\r\n                System.out.println(\"DEBUG: getAllOrders() trả về null\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"DEBUG: Lỗi trong loadOrders(): \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(\"DEBUG: loadOrders() hoàn thành\");\r\n    }\r\n\r\n    @FXML\r\n    private void handleSearch() {\r\n        System.out.println(\"=== DEBUG: handleSearch() được gọi ===\");\r\n\r\n        if (ordersList == null || ordersList.isEmpty()) {\r\n            System.out.println(\"DEBUG: ordersList is null or empty\");\r\n            showAlert(\"Không có dữ liệu để tìm kiếm\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        String searchText = searchField.getText().toLowerCase();\r\n        String selectedStatus = filterStatusComboBox.getValue();\r\n\r\n        System.out.println(\"DEBUG: Search text: \" + searchText + \", Status: \" + selectedStatus);\r\n\r\n        List<Order> filtered = ordersList.stream()\r\n                .filter(order -> {\r\n                    boolean matchesSearch = searchText.isEmpty() ||\r\n                            String.valueOf(order.getOrderId()).contains(searchText) ||\r\n                            String.valueOf(order.getStaffId()).contains(searchText) ||\r\n                            (order.getNote() != null && order.getNote().toLowerCase().contains(searchText));\r\n\r\n                    boolean matchesStatus = \"Tất cả\".equals(selectedStatus) ||\r\n                            order.getStatus().equals(selectedStatus);\r\n\r\n                    return matchesSearch && matchesStatus;\r\n                })\r\n                .collect(Collectors.toList());\r\n\r\n        System.out.println(\"DEBUG: Số orders sau khi filter: \" + filtered.size());\r\n        filteredOrdersList.setAll(filtered);\r\n    }\r\n\r\n    @FXML\r\n    private void handleRefresh() {\r\n        searchField.clear();\r\n        filterStatusComboBox.setValue(\"Tất cả\");\r\n        loadOrders();\r\n        detailPane.setExpanded(false);\r\n    }\r\n\r\n    private void loadOrderDetails(Order order) {\r\n        currentEditingOrder = order;\r\n\r\n        // Load thông tin order\r\n        editOrderIdField.setText(String.valueOf(order.getOrderId()));\r\n        editStaffIdField.setText(String.valueOf(order.getStaffId()));\r\n        editOrderDatePicker.setValue(order.getOrderDate().toLocalDate());\r\n        editStatusComboBox.setValue(order.getStatus());\r\n        editNoteField.setText(order.getNote());\r\n\r\n        // Load chi tiết order\r\n        List<OrderDetail> details = orderDao.getOrderDetails(order.getOrderId());\r\n\r\n        // Set tên sản phẩm cho mỗi OrderDetail\r\n        if (productDAO != null) {\r\n            for (OrderDetail detail : details) {\r\n                try {\r\n                    // Lấy thông tin sản phẩm từ database\r\n                    String productName = getProductName(detail.getProductId());\r\n                    if (productName != null) {\r\n                        detail.setProductName(productName);\r\n                    } else {\r\n                        detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\r\n                    }\r\n                } catch (Exception e) {\r\n                    System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\r\n                    detail.setProductName(\"Sản phẩm #\" + detail.getProductId());\r\n                }\r\n            }\r\n        }\r\n\r\n        detailsList.clear();\r\n        detailsList.addAll(details);\r\n        orderDetailsTable.setItems(detailsList);\r\n\r\n        // Tính tổng tiền\r\n        updateTotalAmount();\r\n\r\n        // Mở panel chi tiết\r\n        detailPane.setExpanded(true);\r\n    }\r\n\r\n    private void updateTotalAmount() {\r\n        double total = detailsList.stream()\r\n                .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\r\n                .sum();\r\n        totalAmountLabel.setText(currencyFormat.format(total));\r\n    }\r\n\r\n    @FXML\r\n    private void handleUpdateOrder() {\r\n        if (currentEditingOrder == null) {\r\n            showAlert(\"Vui lòng chọn đơn hàng cần cập nhật\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Lấy thông tin mới\r\n            int staffId = Integer.parseInt(editStaffIdField.getText());\r\n            LocalDateTime orderDate = LocalDateTime.of(editOrderDatePicker.getValue(), LocalTime.now());\r\n            String status = editStatusComboBox.getValue();\r\n            String note = editNoteField.getText();\r\n\r\n            // Tạo order mới với thông tin cập nhật\r\n            Order updatedOrder = new Order(\r\n                    currentEditingOrder.getOrderId(),\r\n                    staffId,\r\n                    orderDate,\r\n                    0, // Sẽ tính lại\r\n                    status,\r\n                    note\r\n            );\r\n\r\n            // Tính tổng tiền\r\n            double total = detailsList.stream()\r\n                    .mapToDouble(d -> d.getQuantity() * d.getUnitPrice())\r\n                    .sum();\r\n            updatedOrder.setTotalAmount(total);\r\n\r\n            // Cập nhật vào database\r\n            boolean success = orderDao.updateOrder(updatedOrder, detailsList);\r\n\r\n            if (success) {\r\n                showAlert(\"Cập nhật đơn hàng thành công!\", Alert.AlertType.INFORMATION);\r\n                loadOrders(); // Reload danh sách\r\n                detailPane.setExpanded(false);\r\n            } else {\r\n                showAlert(\"Cập nhật thất bại. Vui lòng thử lại.\", Alert.AlertType.ERROR);\r\n            }\r\n\r\n        } catch (NumberFormatException e) {\r\n            showAlert(\"Vui lòng nhập đúng định dạng số cho mã nhân viên\", Alert.AlertType.ERROR);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Lỗi: \" + e.getMessage(), Alert.AlertType.ERROR);\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleCancelEdit() {\r\n        detailPane.setExpanded(false);\r\n        currentEditingOrder = null;\r\n        clearEditForm();\r\n    }\r\n\r\n    private void handleDeleteOrder(Order order) {\r\n        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);\r\n        alert.setTitle(\"Xác nhận xóa\");\r\n        alert.setHeaderText(\"Bạn có chắc chắn muốn xóa đơn hàng #\" + order.getOrderId() + \"?\");\r\n        alert.setContentText(\"Hành động này không thể hoàn tác.\");\r\n\r\n        Optional<ButtonType> result = alert.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            // Ở đây bạn có thể thêm phương thức deleteOrder trong OrderDao\r\n            // Tạm thời có thể cập nhật status thành \"Cancelled\"\r\n            boolean success = orderDao.updateOrderStatus(order.getOrderId(), \"Cancelled\");\r\n            if (success) {\r\n                showAlert(\"Đã hủy đơn hàng thành công!\", Alert.AlertType.INFORMATION);\r\n                loadOrders();\r\n            } else {\r\n                showAlert(\"Không thể hủy đơn hàng.\", Alert.AlertType.ERROR);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void clearEditForm() {\r\n        editOrderIdField.clear();\r\n        editStaffIdField.clear();\r\n        editOrderDatePicker.setValue(null);\r\n        editStatusComboBox.setValue(null);\r\n        editNoteField.clear();\r\n        detailsList.clear();\r\n        totalAmountLabel.setText(\"0 VND\");\r\n    }\r\n\r\n    private void showAlert(String message, Alert.AlertType type) {\r\n        Alert alert = new Alert(type);\r\n        alert.setTitle(\"Thông báo\");\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @FXML\r\n    private void handleAddProduct() {\r\n        if (currentEditingOrder == null) {\r\n            showAlert(\"Vui lòng chọn đơn hàng trước khi thêm sản phẩm\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n        showAddProductDialog();\r\n    }\r\n\r\n    @FXML\r\n    private void handleEditProduct() {\r\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\r\n        if (selected == null) {\r\n            showAlert(\"Vui lòng chọn sản phẩm cần sửa\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n        showEditProductDialog(selected);\r\n    }\r\n\r\n    @FXML\r\n    private void handleDeleteProduct() {\r\n        OrderDetail selected = orderDetailsTable.getSelectionModel().getSelectedItem();\r\n        if (selected == null) {\r\n            showAlert(\"Vui lòng chọn sản phẩm cần xóa\", Alert.AlertType.WARNING);\r\n            return;\r\n        }\r\n\r\n        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);\r\n        confirm.setTitle(\"Xác nhận xóa\");\r\n        confirm.setHeaderText(\"Xóa sản phẩm khỏi đơn hàng?\");\r\n        confirm.setContentText(\"Bạn có chắc chắn muốn xóa sản phẩm này?\");\r\n\r\n        Optional<ButtonType> result = confirm.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            detailsList.remove(selected);\r\n            updateTotalAmount();\r\n        }\r\n    }\r\n\r\n    private void showAddProductDialog() {\r\n        Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.setTitle(\"Thêm sản phẩm vào đơn hàng\");\r\n\r\n        VBox vbox = new VBox(15);\r\n        vbox.setPadding(new Insets(20));\r\n        vbox.setAlignment(Pos.CENTER);\r\n\r\n        // ComboBox chọn sản phẩm\r\n        Label lblProduct = new Label(\"Chọn sản phẩm:\");\r\n        ComboBox<Product> cbProducts = new ComboBox<>();\r\n\r\n        try {\r\n            List<Product> products = getSimpleProductList();\r\n            cbProducts.setItems(FXCollections.observableArrayList(products));\r\n            cbProducts.setConverter(new javafx.util.StringConverter<Product>() {\r\n                @Override\r\n                public String toString(Product product) {\r\n                    return product != null ? product.getNameProducts() + \" - \" + currencyFormat.format(product.getPrice()) : \"\";\r\n                }\r\n                @Override\r\n                public Product fromString(String string) {\r\n                    return null;\r\n                }\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            showAlert(\"Lỗi khi tải danh sách sản phẩm\", Alert.AlertType.ERROR);\r\n        }\r\n\r\n        // ComboBox chọn size\r\n        Label lblSize = new Label(\"Chọn size:\");\r\n        ComboBox<String> cbSize = new ComboBox<>();\r\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\r\n        cbSize.setValue(\"M\");\r\n\r\n        // Spinner số lượng\r\n        Label lblQuantity = new Label(\"Số lượng:\");\r\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, 1);\r\n        spinQuantity.setEditable(true);\r\n\r\n        // Buttons\r\n        HBox buttonBox = new HBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        Button btnAdd = new Button(\"Thêm\");\r\n        btnAdd.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\r\n        btnAdd.setOnAction(e -> {\r\n            Product selectedProduct = cbProducts.getValue();\r\n            if (selectedProduct == null) {\r\n                showAlert(\"Vui lòng chọn sản phẩm\", Alert.AlertType.WARNING);\r\n                return;\r\n            }\r\n\r\n            OrderDetail newDetail = new OrderDetail();\r\n            newDetail.setProductId(selectedProduct.getId());\r\n            newDetail.setProductName(selectedProduct.getNameProducts());\r\n            newDetail.setSize(cbSize.getValue());\r\n            newDetail.setQuantity(spinQuantity.getValue());\r\n            newDetail.setUnitPrice(selectedProduct.getPrice());\r\n\r\n            // Kiểm tra xem sản phẩm đã tồn tại chưa\r\n            OrderDetail existing = detailsList.stream()\r\n                    .filter(d -> d.getProductId() == newDetail.getProductId() &&\r\n                            d.getSize().equals(newDetail.getSize()))\r\n                    .findFirst()\r\n                    .orElse(null);\r\n\r\n            if (existing != null) {\r\n                existing.setQuantity(existing.getQuantity() + newDetail.getQuantity());\r\n                orderDetailsTable.refresh();\r\n            } else {\r\n                detailsList.add(newDetail);\r\n            }\r\n\r\n            updateTotalAmount();\r\n            dialog.close();\r\n        });\r\n\r\n        Button btnCancel = new Button(\"Hủy\");\r\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\r\n        btnCancel.setOnAction(e -> dialog.close());\r\n\r\n        buttonBox.getChildren().addAll(btnAdd, btnCancel);\r\n\r\n        vbox.getChildren().addAll(\r\n                lblProduct, cbProducts,\r\n                lblSize, cbSize,\r\n                lblQuantity, spinQuantity,\r\n                buttonBox\r\n        );\r\n\r\n        Scene scene = new Scene(vbox, 400, 300);\r\n        dialog.setScene(scene);\r\n        dialog.showAndWait();\r\n    }\r\n\r\n    private void showEditProductDialog(OrderDetail detail) {\r\n        Stage dialog = new Stage();\r\n        dialog.initModality(Modality.APPLICATION_MODAL);\r\n        dialog.setTitle(\"Sửa sản phẩm\");\r\n\r\n        VBox vbox = new VBox(15);\r\n        vbox.setPadding(new Insets(20));\r\n        vbox.setAlignment(Pos.CENTER);\r\n\r\n        // Hiển thị tên sản phẩm\r\n        Label lblProduct = new Label(\"Sản phẩm: \" + detail.getProductName());\r\n        lblProduct.setStyle(\"-fx-font-weight: bold;\");\r\n\r\n        // ComboBox size\r\n        Label lblSize = new Label(\"Size:\");\r\n        ComboBox<String> cbSize = new ComboBox<>();\r\n        cbSize.setItems(FXCollections.observableArrayList(\"S\", \"M\", \"L\"));\r\n        cbSize.setValue(detail.getSize());\r\n\r\n        // Spinner số lượng\r\n        Label lblQuantity = new Label(\"Số lượng:\");\r\n        Spinner<Integer> spinQuantity = new Spinner<>(1, 99, detail.getQuantity());\r\n        spinQuantity.setEditable(true);\r\n\r\n        // Buttons\r\n        HBox buttonBox = new HBox(10);\r\n        buttonBox.setAlignment(Pos.CENTER);\r\n\r\n        Button btnSave = new Button(\"Lưu\");\r\n        btnSave.setStyle(\"-fx-background-color: #28a745; -fx-text-fill: white;\");\r\n        btnSave.setOnAction(e -> {\r\n            detail.setSize(cbSize.getValue());\r\n            detail.setQuantity(spinQuantity.getValue());\r\n            orderDetailsTable.refresh();\r\n            updateTotalAmount();\r\n            dialog.close();\r\n        });\r\n\r\n        Button btnCancel = new Button(\"Hủy\");\r\n        btnCancel.setStyle(\"-fx-background-color: #6c757d; -fx-text-fill: white;\");\r\n        btnCancel.setOnAction(e -> dialog.close());\r\n\r\n        buttonBox.getChildren().addAll(btnSave, btnCancel);\r\n\r\n        vbox.getChildren().addAll(\r\n                lblProduct,\r\n                lblSize, cbSize,\r\n                lblQuantity, spinQuantity,\r\n                buttonBox\r\n        );\r\n\r\n        Scene scene = new Scene(vbox, 350, 250);\r\n        dialog.setScene(scene);\r\n        dialog.showAndWait();\r\n    }\r\n\r\n    // Phương thức helper để lấy tên sản phẩm\r\n    private String getProductName(int productId) {\r\n        String sql = \"SELECT NameProducts FROM Products WHERE ID = ?\";\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setInt(1, productId);\r\n            ResultSet rs = stmt.executeQuery();\r\n            if (rs.next()) {\r\n                return rs.getString(\"NameProducts\");\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"Lỗi khi lấy tên sản phẩm: \" + e.getMessage());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Phương thức helper để lấy danh sách sản phẩm đơn giản\r\n    private List<Product> getSimpleProductList() {\r\n        List<Product> products = new ArrayList<>();\r\n        String sql = \"SELECT ID, NameProducts, Price FROM Products\";\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql);\r\n             ResultSet rs = stmt.executeQuery()) {\r\n\r\n            while (rs.next()) {\r\n                Product p = new Product();\r\n                p.setId(rs.getInt(\"ID\"));\r\n                p.setNameProducts(rs.getString(\"NameProducts\"));\r\n                p.setPrice(rs.getDouble(\"Price\"));\r\n                products.add(p);\r\n            }\r\n        } catch (Exception e) {\r\n            System.out.println(\"Lỗi khi lấy danh sách sản phẩm: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n        return products;\r\n    }\r\n}"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\OrderController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\controller\\ProductController.java"
                    },
                    {
                        "path": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java",
                        "fsPath": "src\\main\\java\\com\\coffeeshop\\coffeeshop\\model\\OrderDetail.java"
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderUpdate.fxml",
                        "fsPath": "src\\main\\resources\\views\\Order\\OrderUpdate.fxml"
                    },
                    {
                        "path": "src\\main\\resources\\views\\Order\\OrderView.fxml",
                        "fsPath": "src\\main\\resources\\views\\Order\\OrderView.fxml"
                    },
                    {
                        "path": "src\\main\\resources\\views\\products\\Products.fxml",
                        "fsPath": "src\\main\\resources\\views\\products\\Products.fxml"
                    }
                ]
            },
            "createdAt": 1752086057681,
            "isInternal": false
        }
    ],
    "isAgent": false,
    "isNameGenerated": true,
    "isCustomAgent": false
}
}